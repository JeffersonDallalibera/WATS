# WATS_Project/wats_app/app_window.py (Com Atualiza√ß√£o Diferencial)

import customtkinter as ctk
from tkinter import Menu, messagebox, ttk
import os
import sys
import socket
import subprocess
import webbrowser
import logging
import json
from threading import Thread, Event
from typing import Dict, Any, List, Optional, Set, Tuple

from .config import ASSETS_DIR, FILTER_PLACEHOLDER, BASE_DIR, USER_DATA_DIR, is_demo_mode, get_app_config
from .db.db_service import DBService
from .db.exceptions import DatabaseError
from .dialogs import ClientSelectorDialog
from .admin_panels.admin_hub import AdminHubDialog
from .utils import parse_particularities, hash_password_md5

# Importa√ß√£o condicional do RecordingManager em modo demo
if not is_demo_mode():
    from .recording import RecordingManager
else:
    # Mock do RecordingManager para modo demo
    class RecordingManager:
        def __init__(self, *args, **kwargs):
            pass
        def initialize(self):
            return True
        def set_callbacks(self, *args, **kwargs):
            pass
        def start_recording(self, *args, **kwargs):
            pass
        def stop_recording(self, *args, **kwargs):
            pass
        def shutdown(self):
            pass

try:
    from .session_protection import CreateSessionProtectionDialog, ValidateSessionPasswordDialog
    # N√£o importamos session_protection_manager aqui - sempre buscaremos a inst√¢ncia atual
    logging.info(f"[IMPORT_DEBUG] session_protection classes import bem-sucedido")
    session_protection_manager = None  # Ser√° sempre buscado dinamicamente
except ImportError as e:
    # Fallback se n√£o encontrar o m√≥dulo
    logging.error(f"[IMPORT_DEBUG] ImportError ao importar session_protection: {e}")
    CreateSessionProtectionDialog = None
    ValidateSessionPasswordDialog = None
    session_protection_manager = None

def get_current_session_protection_manager():
    """Retorna a inst√¢ncia atual do session_protection_manager."""
    try:
        from .session_protection import session_protection_manager
        return session_protection_manager
    except ImportError:
        return None

# Define uma estrutura para facilitar a compara√ß√£o
class ConnectionData:
    def __init__(self, row):
        # Mapeia a linha do DB para atributos nomeados
        self.con_codigo: int = row[0]
        self.ip: str = row[1]
        self.nome: str = row[2]
        self.user: str = row[3]
        self.pwd: str = row[4]
        self.group_name: Optional[str] = row[5]
        self.connected_user: Optional[str] = row[6] # Usu√°rio(s) conectado(s)
        self.extra: Optional[str] = row[8]
        self.particularidade: Optional[str] = row[9] # Link Wiki cru
        self.cliente: Optional[str] = row[10]
        self.con_tipo: str = row[11] # Tipo da conex√£o

        # Dados derivados para a Treeview
        self.wiki_display_text = self._get_wiki_display(self.particularidade)
        self.tags = ('in_use',) if self.connected_user else ()

    def _get_wiki_display(self, particularidade_str: Optional[str]) -> str:
        if not particularidade_str: return ''
        particularidades = parse_particularities(particularidade_str)
        if not particularidades: return ''
        
        # Conta quantos t√™m URL (links de wiki)
        com_wiki = sum(1 for _, url in particularidades if url)
        total = len(particularidades)
        
        if total == 1:
            nome, url = particularidades[0]
            if url:
                return f"üîó {nome}"
            else:
                return f"üìã {nome}"
        else:
            if com_wiki > 0:
                return f"üîó {com_wiki} Wiki{'s' if com_wiki != 1 else ''} | üìã {total - com_wiki} Info{'s' if (total - com_wiki) != 1 else ''}"
            else:
                return f"üìã {total} Cliente{'s' if total != 1 else ''}"

    def get_treeview_values(self) -> Tuple:
        """Retorna a tupla de valores na ordem esperada pela Treeview."""
        # Ordem das colunas: ('db_id', 'ip', 'user', 'pwd', 'title', 'extra', 'wiki_link', 'username', 'wiki_text', 'con_cliente')
        return (
            self.con_codigo, self.ip, self.user, self.pwd, self.nome,
            self.extra, self.particularidade, self.connected_user,
            self.wiki_display_text, self.cliente
        )

    # Permite comparar objetos ConnectionData
    def __eq__(self, other):
        if not isinstance(other, ConnectionData): return NotImplemented
        # Compara apenas os campos relevantes para a exibi√ß√£o na Treeview
        return (self.nome == other.nome and
                self.group_name == other.group_name and
                self.connected_user == other.connected_user and
                self.wiki_display_text == other.wiki_display_text)

    # Necess√°rio se __eq__ for definido
    def __hash__(self):
        return hash((self.con_codigo,))


class Application(ctk.CTk):
    def __init__(self, settings_instance):
        super().__init__()
        # Store settings instance
        self.settings = settings_instance
        
        # ... (inicializa√ß√£o de user_session_name, user_ip, etc. id√™ntica) ...
        self.user_session_name: str = os.environ.get('USERNAME', 'Desconhecido')
        # Defer potentially slow network operation
        self.user_ip: str = '127.0.0.1'  # Default, will be set async
        self.computer_name: str = os.environ.get('COMPUTERNAME', 'N/A')
        self.os_user: str = os.environ.get('USERNAME', 'N/A')
        self.settings_file = os.path.join(USER_DATA_DIR, 'wats_settings.json')

        logging.info(f"Arquivo de settings definido como: {self.settings_file}")
        # Apply theme preference quickly (small, local IO)
        self._load_and_apply_theme()

        # Defer heavy operations (DB initialization and heavy widget creation)
        # to improve perceived startup time. We'll create a minimal window
        # quickly and then schedule the rest.
        self.db = None  # Will be set later by background init
        self.recording_manager = None  # Will be set later by background init

        # Lightweight initial state
        self.data_cache: List[ConnectionData] = []
        self.active_heartbeats: Dict[int, Event] = {}
        self._refresh_job = None
        self.tree_item_map: Dict[int, str] = {}
        self.group_item_map: Dict[str, str] = {}

        # Configure basic window and show a quick loading indicator
        self._configure_window()
        
        # Create immediate simple loading label
        self._create_immediate_loading()
        
        # Schedule deferred full initialization shortly after the window is responsive
        self.after(50, self._deferred_init)

        self.protocol("WM_DELETE_WINDOW", self._on_closing)
    
    def _create_immediate_loading(self):
        """Creates a simple loading message immediately to show responsiveness."""
        # Create a minimal loading interface without heavy widgets
        self.immediate_loading_frame = ctk.CTkFrame(self)
        self.immediate_loading_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        self.immediate_loading_label = ctk.CTkLabel(
            self.immediate_loading_frame, 
            text="üîÑ Inicializando WATS...", 
            font=("Segoe UI", 16)
        )
        self.immediate_loading_label.pack(expand=True, pady=50)
        
    # --- [NOVOS M√âTODOS] Para salvar e carregar o tema ---
    def _load_theme_preference(self) -> Optional[str]:
        """L√™ o arquivo JSON e retorna o tema salvo."""
        logging.info(f"Procurando tema em: {self.settings_file}")
        if not os.path.exists(self.settings_file):
            logging.warning("Arquivo de settings n√£o encontrado.")
            return None
        try:
            # --- [NOVO] Verifica se o arquivo est√° vazio ---
            if os.path.getsize(self.settings_file) == 0:
                logging.warning("Arquivo de settings encontrado, mas est√° VAZIO.")
                # Opcional: Tenta deletar o arquivo vazio para a pr√≥xima tentativa criar um novo
                try: os.remove(self.settings_file)
                except OSError as del_err: logging.error(f"N√£o foi poss√≠vel deletar arquivo vazio: {del_err}")
                return None # Trata como n√£o existente
            # --- FIM NOVO ---

            with open(self.settings_file, 'r', encoding='utf-8') as f: # Adiciona encoding
                data = json.load(f)
                theme = data.get("theme")
                logging.info(f"Tema encontrado no arquivo: {theme}")
                return theme
        except (json.JSONDecodeError, IOError) as e:
            # O log "Expecting value..." entra aqui
            logging.warning(f"N√£o foi poss√≠vel LER o arquivo de settings: {e}")
            return None

    def _save_theme_preference(self, theme_mode: str):
        """Salva o tema escolhido no arquivo JSON."""
        logging.info(f"Tentando salvar tema '{theme_mode}' em: {self.settings_file}")
        try:
            os.makedirs(os.path.dirname(self.settings_file), exist_ok=True)  # Cria diret√≥rios, se n√£o existirem
            with open(self.settings_file, 'w', encoding='utf-8') as f: # Adiciona encoding
                json.dump({"theme": theme_mode}, f, indent=4)
            logging.info(f"Tema salvo com sucesso: {theme_mode}")
        except IOError as e:
            logging.error(f"N√£o foi poss√≠vel SALVAR o arquivo de settings: {e}")
            # --- [NOVO] Mostra erro para o usu√°rio ---
            messagebox.showwarning(
                "Erro ao Salvar Configura√ß√£o",
                f"N√£o foi poss√≠vel salvar a prefer√™ncia de tema.\n\n"
                f"Verifique as permiss√µes de escrita na pasta:\n{os.path.dirname(self.settings_file)}\n\n"
                f"Erro: {e}"
            )
    def _load_and_apply_theme(self):
        """L√™ a prefer√™ncia e aplica o tema na inicializa√ß√£o."""
        theme = self._load_theme_preference()
        if theme in ["Light", "Dark"]:
            ctk.set_appearance_mode(theme)
            logging.info(f"Tema salvo '{theme}' aplicado.")
        else:
            ctk.set_appearance_mode("System")
            logging.info("Nenhum tema salvo ou tema inv√°lido. Usando 'System'.")
    # --- Fim dos novos m√©todos ---

    def _on_closing(self):
        logging.info("Fechando aplica√ß√£o...")
        if self._refresh_job: self.after_cancel(self._refresh_job) # Cancela refresh pendente
        # Stop all heartbeats
        for stop_event in self.active_heartbeats.values(): stop_event.set()
        
        # Shutdown recording manager
        if self.recording_manager:
            try:
                self.recording_manager.shutdown()
                logging.info("Recording manager shutdown completed")
            except Exception as e:
                logging.error(f"Error shutting down recording manager: {e}")
        
        # Cleanup collaborative sessions
        self._cleanup_collaborative_sessions()
        
        self.destroy()

    # --- Deferred initialization helpers ---
    def _deferred_init(self):
        """Runs on the main thread soon after the window is displayed.
        This creates the heavier widgets and starts DB initialization in a
        background thread so the UI appears quickly.
        """
        logging.info("Deferred UI init starting...")
        try:
            # Remove immediate loading
            if hasattr(self, 'immediate_loading_frame'):
                self.immediate_loading_frame.destroy()
                
            # Create the widgets/styles (may be somewhat expensive)
            self._create_widgets()
            self._apply_treeview_theme()
            
            # Show the proper loading message now that widgets are created
            self._show_loading_message(True)
        except Exception as e:
            logging.error(f"Erro durante cria√ß√£o de widgets: {e}", exc_info=True)

        # Start DB initialization in background; when DB is ready it will start the
        # initial data load in its own background thread.
        logging.info("[CONFIG_DEBUG] Iniciando thread de inicializa√ß√£o do DB...")
        Thread(target=self._init_db_and_start, daemon=True).start()
        logging.info("[CONFIG_DEBUG] Thread de inicializa√ß√£o do DB iniciada")

    def _init_db_and_start(self):
        """Initialize DBService in a background thread and then start the
        initial data load (also in background). Any UI-side error display is
        marshalled to the main thread via `after`.
        """
        logging.info("Background DB initialization starting...")
        logging.info("[CONFIG_DEBUG] Fun√ß√£o _init_db_and_start iniciada")
        
        # Resolve IP address in background to avoid blocking startup
        try:
            self.user_ip = socket.gethostbyname(socket.gethostname())
            logging.debug(f"User IP resolved to: {self.user_ip}")
        except socket.gaierror as e:
            logging.warning(f"Could not resolve hostname: {e}, using localhost")
            self.user_ip = '127.0.0.1'
        
        try:
            self.db = DBService(self.settings)
            logging.info("DBService initialized successfully in background.")
            logging.info(f"[CONFIG_DEBUG] self.db criado: {self.db is not None}")
            logging.info(f"[CONFIG_DEBUG] type(self.db): {type(self.db).__name__}")
            
            # Configura o sistema de prote√ß√£o de sess√£o com acesso ao DB
            try:
                logging.info("[CONFIG_DEBUG] Iniciando configura√ß√£o do sistema de prote√ß√£o...")
                
                # Tenta fazer import direto primeiro
                try:
                    from src.wats.session_protection import configure_session_protection_with_db
                    logging.info("[CONFIG_DEBUG] Import direto realizado com sucesso")
                except ImportError:
                    logging.info("[CONFIG_DEBUG] Import direto falhou, tentando import relativo...")
                    from .session_protection import configure_session_protection_with_db
                    logging.info("[CONFIG_DEBUG] Import relativo realizado com sucesso")
                
                logging.info("[CONFIG_DEBUG] Chamando configure_session_protection_with_db...")
                configure_session_protection_with_db(self.db)
                logging.info("Sistema de prote√ß√£o de sess√£o configurado com valida√ß√£o no servidor")
                logging.info("[CONFIG_DEBUG] Configura√ß√£o do sistema de prote√ß√£o conclu√≠da com sucesso")
                
                # Verifica se a configura√ß√£o foi aplicada corretamente
                try:
                    from src.wats.session_protection import session_protection_manager
                    logging.info(f"[CONFIG_DEBUG] session_protection_manager existe: {session_protection_manager is not None}")
                    if session_protection_manager:
                        logging.info(f"[CONFIG_DEBUG] session_protection_manager.db_service: {session_protection_manager.db_service is not None}")
                        logging.info(f"[CONFIG_DEBUG] session_protection_manager.session_repo: {session_protection_manager.session_repo is not None}")
                except ImportError:
                    from .session_protection import session_protection_manager
                    logging.info(f"[CONFIG_DEBUG] session_protection_manager existe: {session_protection_manager is not None}")
                    if session_protection_manager:
                        logging.info(f"[CONFIG_DEBUG] session_protection_manager.db_service: {session_protection_manager.db_service is not None}")
                        logging.info(f"[CONFIG_DEBUG] session_protection_manager.session_repo: {session_protection_manager.session_repo is not None}")
                
            except Exception as e:
                logging.warning(f"Falha ao configurar prote√ß√£o de sess√£o: {e}")
                logging.error(f"[CONFIG_DEBUG] Erro detalhado na configura√ß√£o: {e}", exc_info=True)
            
            # Initialize recording manager
            self.recording_manager = RecordingManager(self.settings)
            if self.recording_manager.initialize():
                logging.info("Recording manager initialized successfully.")
                # Set up recording callbacks
                self.recording_manager.set_callbacks(
                    on_started=self._on_recording_started,
                    on_stopped=self._on_recording_stopped,
                    on_error=self._on_recording_error
                )
            else:
                logging.warning("Recording manager initialization failed.")
                self.recording_manager = None
                
        except DatabaseError as e:
            logging.critical(f"Falha CR√çTICA ao inicializar DB (background): {e}", exc_info=True)
            self.after(0, messagebox.showerror, "Erro Cr√≠tico de Banco de Dados",
                       f"N√£o foi poss√≠vel iniciar a aplica√ß√£o.\n\n{e}")
            self.after(0, self._show_loading_message, False)
            return

        # Start the initial data fetch in its own background thread
        Thread(target=self._initial_load_in_background, daemon=True).start()

    def _configure_window(self):
        """Configura a janela principal."""
        # Carrega configura√ß√µes da aplica√ß√£o
        app_config = get_app_config()
        window_title = app_config.get('window_title', 'WATS - Sistema de Grava√ß√£o RDP')
        
        # Define o t√≠tulo com o nome da sess√£o do usu√°rio
        self.title(f"{window_title} ({self.user_session_name})") 
        self.geometry("800x650")
        self.minsize(700, 500)
        
        # [ALTERADO] O 'set_appearance_mode' foi movido para _load_and_apply_theme
        # Esta linha agora apenas l√™ o modo que j√° foi definido.
        initial_mode = ctk.get_appearance_mode()
        self.initial_button_icon = "‚òÄÔ∏è" if initial_mode == "Light" else "üåô"

        icon_path = os.path.join(ASSETS_DIR, 'ats.ico')
        if os.path.exists(icon_path):
            try:
                self.iconbitmap(icon_path)
            except Exception as e:
                logging.warning(f"N√£o foi poss√≠vel carregar o √≠cone: {e}")

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

    def _apply_treeview_theme(self):
        """Aplica o tema atual (claro ou escuro) ao widget ttk.Treeview."""
        mode = ctk.get_appearance_mode()

        if mode == "Dark":
            colors = ("#E0E0E0", "#2B2B2B", "#3C3F41", "#1F6AA5", "#2B2B2B", "#6B2D2D", "#FFFFFF")
        else:
            colors = ("#1E1E1E", "#FFFFFF", "#F0F0F0", "#0078D7", "#FFFFFF", "#FFDDE0", "#990000")
        
        text_color, bg_color, heading_bg, selected_color, field_bg, in_use_bg, in_use_fg = colors

        self.style.configure("Treeview", background=bg_color, foreground=text_color, fieldbackground=field_bg, rowheight=28, font=("Segoe UI", 10), borderwidth=0, relief="flat")
        self.style.configure("Treeview.Heading", background=heading_bg, foreground=text_color, font=("Segoe UI", 10, 'bold'), borderwidth=0, relief="flat")
        self.style.map('Treeview', background=[('selected', selected_color)], foreground=[('selected', 'white')])
        self.style.configure("in_use.Treeview", background=in_use_bg, foreground=in_use_fg)
        
        try:
            self.context_menu.config(bg=bg_color, fg=text_color, activebackground=selected_color, activeforeground='white')
        except AttributeError:
             pass 

    def _toggle_theme(self):
        mode = ctk.get_appearance_mode()
        new_mode = "Light" if mode == "Dark" else "Dark"
        ctk.set_appearance_mode(new_mode)
        self.theme_button.configure(text="‚òÄÔ∏è" if new_mode == "Light" else "üåô")
        self._apply_treeview_theme()
        self._save_theme_preference(new_mode)
    
    def _create_widgets(self):
        """Cria todos os widgets da interface, incluindo a Treeview."""
        # --- IN√çCIO DO CABE√áALHO ---
        header_frame = ctk.CTkFrame(self, corner_radius=10)
        header_frame.grid(row=0, column=0, padx=15, pady=(15, 10), sticky="ew")
        header_frame.grid_columnconfigure(0, weight=1)

        self.filter_var = ctk.StringVar()
        self.filter_entry = ctk.CTkEntry(
            header_frame,
            textvariable=self.filter_var,
            placeholder_text=FILTER_PLACEHOLDER,
            font=("Segoe UI", 13),
            height=40,
            border_width=0
        )
        self.filter_entry.grid(row=0, column=0, padx=(15, 10), pady=10, sticky="ew")
        self.filter_var.trace_add("write", lambda *args: self._on_filter_change())

        self.theme_button = ctk.CTkButton(
            header_frame,
            text=self.initial_button_icon, # Este valor √© definido em _configure_window
            width=40,
            height=40,
            font=("Segoe UI", 20),
            command=self._toggle_theme
        )
        self.theme_button.grid(row=0, column=1, padx=(0, 10), pady=10)

        # Bot√£o de grava√ß√µes (se dispon√≠vel)
        if self.recording_manager:
            self.recording_button = ctk.CTkButton(
                header_frame,
                text="üìπ",
                width=40,
                height=40,
                font=("Segoe UI", 20),
                command=self._show_recording_info
            )
            self.recording_button.grid(row=0, column=2, padx=(0, 10), pady=10)
            admin_column = 3
        else:
            admin_column = 2

        self.admin_button = ctk.CTkButton(
            header_frame,
            text="‚öôÔ∏è",
            width=40,
            height=40,
            font=("Segoe UI", 20),
            command=self._open_admin_login
        )
        self.admin_button.grid(row=0, column=admin_column, padx=(0, 15), pady=10)
        # --- FIM DO CABE√áALHO ---

        # --- CONTAINER DA TREEVIEW (O c√≥digo restante deve estar aqui) ---
        tree_container = ctk.CTkFrame(self, fg_color="transparent")
        tree_container.grid(row=1, column=0, padx=15, pady=(0, 15), sticky="nsew")
        tree_container.grid_columnconfigure(0, weight=1)
        tree_container.grid_rowconfigure(0, weight=1)

        self.style = ttk.Style(self) # Importante ter o estilo antes da Treeview
        self.style.theme_use('clam')

        columns = ('db_id', 'ip', 'user', 'pwd', 'title', 'extra', 'wiki_link', 'username', 'wiki_text', 'con_cliente')
        self.tree = ttk.Treeview(
            tree_container,
            columns=columns,
            displaycolumns=('username', 'wiki_text'),
            height=20,
            selectmode='browse',
            show='tree headings', # Mostra cabe√ßalhos, n√£o a coluna #0
            style="Treeview" # Estilo definido em _apply_treeview_theme
        )

        tree_container = ctk.CTkFrame(self, fg_color="transparent")
        tree_container.grid(row=1, column=0, padx=15, pady=(0, 15), sticky="nsew")
        tree_container.grid_columnconfigure(0, weight=1)
        tree_container.grid_rowconfigure(0, weight=1)

        self.style = ttk.Style(self) # Importante ter o estilo antes da Treeview
        self.style.theme_use('clam')

        columns = ('db_id', 'ip', 'user', 'pwd', 'title', 'extra', 'wiki_link', 'username', 'wiki_text', 'con_cliente')
        self.tree = ttk.Treeview(
            tree_container,
            columns=columns,
            displaycolumns=('username', 'wiki_text'),
            height=20,
            selectmode='browse',
            show='tree headings', # Mostra cabe√ßalhos, n√£o a coluna #0
            style="Treeview" # Estilo definido em _apply_treeview_theme
        )
        self.tree.grid(row=0, column=0, sticky="nsew")

        # Configura as colunas (igual a antes)
        self.tree.column('#0', width=300, minwidth=200, stretch=True) # Coluna da √°rvore (Nome/Grupo)
        self.tree.column('username', width=220, anchor='w')
        self.tree.heading('username', text='üë§ Usu√°rio Conectado', anchor='w')
        self.tree.column('wiki_text', width=220, anchor='w')
        self.tree.heading('wiki_text', text='üìã Particularidades', anchor='w')

        scrollbar = ctk.CTkScrollbar(tree_container, command=self.tree.yview)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.tree.configure(yscrollcommand=scrollbar.set)

        # Menu de Contexto (igual a antes)
        self.context_menu = Menu(self, tearoff=0, font=('Segoe UI', 9), borderwidth=0)
        self.context_menu.add_command(label='üîì Liberar Conex√£o', command=self._release_connection)
        self.context_menu.add_command(label='üñ•Ô∏è Usar WTS Nativo (mstsc)', command=self._connect_native_wts)
        
        # Adiciona op√ß√µes de prote√ß√£o de sess√£o
        current_session_manager = get_current_session_protection_manager()
        if CreateSessionProtectionDialog and current_session_manager:
            self.context_menu.add_separator()
            self.context_menu.add_command(label='üîí Proteger Sess√£o', command=self._protect_session)
            self.context_menu.add_command(label='üîì Remover Prote√ß√£o', command=self._remove_session_protection)
        
        # Adiciona op√ß√£o de grava√ß√µes
        if self.recording_manager:
            self.context_menu.add_separator()
            self.context_menu.add_command(label='üìπ Ver Grava√ß√µes', command=self._show_recording_info)

        self.tree.bind('<Double-1>', self._on_item_double_click)
        self.tree.bind('<Button-3>', self._show_context_menu)

        # [NOVO] Label para mensagem de "Carregando..."
        self.loading_label = ctk.CTkLabel(tree_container, text="Carregando conex√µes...", font=("Segoe UI", 16), text_color="gray50")
        # Ser√° posicionado sobre a Treeview quando necess√°rio

    # [NOVO] M√©todo para mostrar/ocultar "Carregando..."
    def _show_loading_message(self, show: bool):
        def task():
            # Defensive: loading_label may not exist yet (deferred init). If so,
            # reschedule this action shortly so it runs after widgets are created.
            if not hasattr(self, 'loading_label'):
                if show:
                    # Try again shortly; avoid tight loop by scheduling after 50ms
                    self.after(50, lambda: self._show_loading_message(show))
                return

            try:
                if show and not self.loading_label.winfo_ismapped():
                    # Coloca o label sobre a treeview
                    self.loading_label.place(relx=0.5, rely=0.5, anchor='center')
                elif not show and self.loading_label.winfo_ismapped():
                    self.loading_label.place_forget()
            except Exception as e:
                # Log and swallow UI errors to avoid crashing the mainloop
                logging.warning(f"_show_loading_message UI error: {e}")
        self.after(0, task) # Agenda para a thread principal da UI

    def _on_filter_change(self):
        # [ALTERADO] Filtro agora opera sobre o data_cache e reconstr√≥i a view (mais simples)
        # A atualiza√ß√£o diferencial s√≥ ocorre no refresh autom√°tico/manual
        filter_text = self.filter_var.get().lower()
        logging.debug(f"Filtrando com texto: '{filter_text}'")
        self._rebuild_tree_from_cache(filter_text)

    def _rebuild_tree_from_cache(self, filter_text: str = ""):
        """Limpa e reconstr√≥i a Treeview usando self.data_cache, aplicando filtro."""
        logging.debug(f"Reconstruindo Treeview do cache com filtro: '{filter_text}'")
        # Limpa completamente a Treeview e os mapas
        for iid in self.tree.get_children(): self.tree.delete(iid)
        self.tree_item_map.clear()
        self.group_item_map.clear()

        # Reconstr√≥i a partir do cache, aplicando o filtro
        current_group_name = None
        filtered_data = [
            conn for conn in self.data_cache if
            (not filter_text or
             filter_text in conn.nome.lower() or
             (conn.group_name and filter_text in conn.group_name.lower()) or
             (conn.cliente and filter_text in conn.cliente.lower()) or
             (conn.connected_user and filter_text in conn.connected_user.lower()))
        ]

        # Ordena (opcional, mas bom para consist√™ncia)
        filtered_data.sort(key=lambda c: (c.group_name or c.nome, c.nome))

        for conn_data in filtered_data:
            parent_iid = ''
            if conn_data.group_name:
                if conn_data.group_name != current_group_name:
                    current_group_name = conn_data.group_name
                    if current_group_name not in self.group_item_map:
                        # Cria o n√≥ do grupo se n√£o existir
                        group_iid = self.tree.insert('', 'end', text=f'üìÅ {current_group_name}', open=True)
                        self.group_item_map[current_group_name] = group_iid
                parent_iid = self.group_item_map.get(current_group_name, '')

            # Insere o item de conex√£o
            item_iid = self.tree.insert(parent_iid, 'end',
                                        text=f' 	{conn_data.nome}', # Texto principal na coluna #0
                                        values=conn_data.get_treeview_values(),
                                        tags=conn_data.tags)
            self.tree_item_map[conn_data.con_codigo] = item_iid # Atualiza o mapa

        logging.debug(f"Reconstru√ß√£o conclu√≠da. {len(self.tree_item_map)} itens na Treeview.")

    def _populate_tree(self):
        """Busca novos dados e aplica atualiza√ß√µes diferenciais na Treeview."""
        if self._refresh_job: self.after_cancel(self._refresh_job) # Cancela job anterior
        logging.info("Iniciando atualiza√ß√£o diferencial da Treeview...")

        try:
            # 0. Limpa prote√ß√µes √≥rf√£s periodicamente (a cada refresh)
            self._cleanup_orphaned_protections()
            
            # 1. Busca novos dados
            new_raw_data = self.db.connections.select_all(self.user_session_name)
            # Converte para objetos e cria mapa/set para lookup r√°pido
            new_data_list = [ConnectionData(row) for row in new_raw_data]
            new_data_map: Dict[int, ConnectionData] = {conn.con_codigo: conn for conn in new_data_list}
            new_ids: Set[int] = set(new_data_map.keys())

            # 2. Pega IDs atuais da Treeview
            current_ids: Set[int] = set(self.tree_item_map.keys())

            # 3. Identifica Adi√ß√µes, Dele√ß√µes, Potenciais Atualiza√ß√µes
            ids_to_add = new_ids - current_ids
            ids_to_delete = current_ids - new_ids
            ids_to_check_update = current_ids.intersection(new_ids)

            logging.debug(f"Atualiza√ß√£o: Add={len(ids_to_add)}, Del={len(ids_to_delete)}, Check={len(ids_to_check_update)}")

            # --- 4. Processa Dele√ß√µes ---
            for con_codigo in ids_to_delete:
                item_iid = self.tree_item_map.pop(con_codigo, None) # Remove do mapa
                if item_iid and self.tree.exists(item_iid):
                    logging.debug(f"Deletando item: ID={con_codigo}, iid={item_iid}")
                    self.tree.delete(item_iid)

            # --- 5. Processa Adi√ß√µes e Atualiza√ß√µes ---
            groups_to_recheck = set() # Grupos que podem ter ficado vazios
            for con_codigo in ids_to_check_update:
                item_iid = self.tree_item_map[con_codigo]
                if not self.tree.exists(item_iid):
                     logging.warning(f"Item ID {con_codigo} estava no mapa mas n√£o na Treeview (iid={item_iid}). Ser√° recriado.")
                     ids_to_add.add(con_codigo) # Marca para recriar
                     del self.tree_item_map[con_codigo]
                     continue

                new_conn_data = new_data_map[con_codigo]
                # Pega dados atuais da Treeview para compara√ß√£o
                # Precisamos reconstruir um objeto ConnectionData a partir dos valores da Treeview
                # NOTA: Isso √© menos eficiente. Se o desempenho for cr√≠tico, armazene
                # os objetos ConnectionData no self.tree_item_map em vez do iid.
                try:
                    current_values = self.tree.item(item_iid, 'values')
                    # Recria uma tupla no formato da linha do banco para o construtor
                    # Ordem: cod, ip, nome, user, pwd, group?, conn_user?, ?, extra?, partic?, cliente?, tipo?
                    current_parent_iid = self.tree.parent(item_iid)
                    current_group_name = self.tree.item(current_parent_iid, 'text').replace('üìÅ ', '') if current_parent_iid else None

                    # Simula a linha do DB (√≠ndices baseados na ordem de ConnectionData)
                    simulated_row = (
                        int(current_values[0]), current_values[1], current_values[4], current_values[2], current_values[3],
                        current_group_name, current_values[7], None, current_values[5], current_values[6],
                        current_values[9], "RDP" # Tipo n√£o est√° nos values, assume RDP ou busca no cache antigo? Melhor buscar no cache
                    )
                    # Busca tipo no cache antigo se poss√≠vel
                    old_conn = next((c for c in self.data_cache if c.con_codigo == con_codigo), None)
                    if old_conn: simulated_row = simulated_row[:-1] + (old_conn.con_tipo,)

                    current_conn_data = ConnectionData(simulated_row)
                except Exception as e:
                     logging.error(f"Erro ao recriar ConnectionData para ID {con_codigo} a partir da Treeview: {e}. Reconstruindo item.")
                     ids_to_add.add(con_codigo) # Marca para recriar
                     if item_iid and self.tree.exists(item_iid): self.tree.delete(item_iid)
                     del self.tree_item_map[con_codigo]
                     continue


                # Compara (usando o __eq__ que definimos)
                if current_conn_data != new_conn_data:
                    logging.debug(f"Atualizando item: ID={con_codigo}, iid={item_iid}")
                    # Atualiza os campos na Treeview
                    self.tree.item(item_iid, text=f' 	{new_conn_data.nome}',
                                   values=new_conn_data.get_treeview_values(),
                                   tags=new_conn_data.tags)

                    # Verifica se o grupo mudou
                    new_parent_iid = self.group_item_map.get(new_conn_data.group_name, '') if new_conn_data.group_name else ''
                    if current_parent_iid != new_parent_iid:
                        logging.debug(f"Movendo item ID={con_codigo} para grupo '{new_conn_data.group_name}' (iid={new_parent_iid})")
                        # Cria novo grupo se necess√°rio
                        if new_conn_data.group_name and new_conn_data.group_name not in self.group_item_map:
                            new_parent_iid = self.tree.insert('', 'end', text=f'üìÅ {new_conn_data.group_name}', open=True)
                            self.group_item_map[new_conn_data.group_name] = new_parent_iid
                        self.tree.move(item_iid, new_parent_iid, 'end')
                        if current_parent_iid: groups_to_recheck.add(current_parent_iid) # Marca grupo antigo para ver se ficou vazio


            # Adiciona novos itens (os de ids_to_add)
            for con_codigo in ids_to_add:
                conn_data = new_data_map[con_codigo]
                parent_iid = ''
                if conn_data.group_name:
                    if conn_data.group_name not in self.group_item_map:
                        # Cria o n√≥ do grupo se n√£o existir
                        group_iid = self.tree.insert('', 'end', text=f'üìÅ {conn_data.group_name}', open=True)
                        self.group_item_map[conn_data.group_name] = group_iid
                    parent_iid = self.group_item_map.get(conn_data.group_name, '')

                logging.debug(f"Inserindo item: ID={con_codigo}, Nome={conn_data.nome}")
                item_iid = self.tree.insert(parent_iid, 'end',
                                            text=f' 	{conn_data.nome}',
                                            values=conn_data.get_treeview_values(),
                                            tags=conn_data.tags)
                self.tree_item_map[conn_data.con_codigo] = item_iid # Adiciona ao mapa

            # --- 6. Limpa Grupos Vazios ---
            groups_to_delete = set()
            # Adiciona grupos que podem ter ficado vazios por causa de movimenta√ß√£o
            for group_iid in groups_to_recheck:
                if group_iid and self.tree.exists(group_iid) and not self.tree.get_children(group_iid):
                    groups_to_delete.add(group_iid)
            # Adiciona grupos que podem ter ficado vazios por causa de dele√ß√£o direta
            for group_name, group_iid in list(self.group_item_map.items()): # Usa list() para poder modificar o dict
                 if group_iid and self.tree.exists(group_iid) and not self.tree.get_children(group_iid):
                     groups_to_delete.add(group_iid)

            for group_iid in groups_to_delete:
                group_name = next((name for name, iid in self.group_item_map.items() if iid == group_iid), None)
                logging.debug(f"Deletando grupo vazio: iid={group_iid}, Nome={group_name}")
                if self.tree.exists(group_iid): self.tree.delete(group_iid)
                if group_name in self.group_item_map: del self.group_item_map[group_name]


            # --- 7. Finaliza√ß√£o ---
            self.data_cache = new_data_list # Atualiza o cache principal
            logging.info("Atualiza√ß√£o diferencial conclu√≠da.")

        except DatabaseError as e:
            logging.warning(f"Falha ao buscar dados para atualiza√ß√£o diferencial: {e}")
            messagebox.showwarning("Erro de Rede", f"N√£o foi poss√≠vel atualizar a lista.\n\n{e}")
        except Exception as e:
            logging.error(f"Erro inesperado durante atualiza√ß√£o diferencial: {e}", exc_info=True)
            # Fallback: Reconstru√ß√£o total em caso de erro grave
            messagebox.showerror("Erro Interno", f"Ocorreu um erro ao atualizar a lista:\n{e}\n\nA lista ser√° recarregada completamente.")
            self._rebuild_tree_from_cache(self.filter_var.get().lower()) # Tenta reconstruir com filtro atual
        finally:
            self._show_loading_message(False) # Esconde "Carregando..."
             # Agenda a pr√≥xima atualiza√ß√£o
            self._refresh_job = self.after(60000, self._populate_tree) # Reinicia timer


    # --- [NOVO] M√©todos de carregamento inicial movidos para background ---
    def _initial_load_in_background(self):
        """Busca os dados iniciais e agenda a constru√ß√£o da Treeview."""
        logging.info("Carregamento inicial em background iniciado...")
        try:
            # 1. Limpa conex√µes fantasmas primeiro
            self.db.logs.cleanup_ghost_connections()
            
            # 2. Limpa prote√ß√µes √≥rf√£s (nova funcionalidade)
            self._cleanup_orphaned_protections()
            
            # 3. Busca os dados
            initial_raw_data = self.db.connections.select_all(self.user_session_name)
            initial_data = [ConnectionData(row) for row in initial_raw_data]
            # 4. Agenda a constru√ß√£o da UI na thread principal
            self.after(0, self._build_initial_tree, initial_data)
        except DatabaseError as e:
             logging.error(f"Falha CR√çTICA no carregamento inicial: {e}", exc_info=True)
             self.after(0, messagebox.showerror, "Erro de Conex√£o Inicial", f"N√£o foi poss√≠vel carregar os dados iniciais:\n{e}")
             self.after(0, self._show_loading_message, False) # Esconde loading
        except Exception as e:
             logging.error(f"Erro INESPERADO no carregamento inicial: {e}", exc_info=True)
             self.after(0, messagebox.showerror, "Erro Inesperado", f"Ocorreu um erro:\n{e}")
             self.after(0, self._show_loading_message, False)

    def _build_initial_tree(self, initial_data: List[ConnectionData]):
        """Constr√≥i a Treeview pela primeira vez com os dados carregados."""
        logging.info("Construindo Treeview inicial...")
        self.data_cache = initial_data
        self._rebuild_tree_from_cache() # Usa a fun√ß√£o de reconstru√ß√£o (sem filtro)
        self._show_loading_message(False) # Esconde "Carregando..."
        # Inicia o ciclo de refresh autom√°tico AP√ìS a carga inicial
        self._refresh_job = self.after(60000, self._populate_tree)
        logging.info("Constru√ß√£o inicial conclu√≠da.")
    # --- FIM Background Load ---

    def _get_selected_item_data(self) -> Optional[Dict[str, Any]]:
        """Obt√©m os dados do item selecionado na Treeview."""
        selection = self.tree.selection()
        if not selection: return None
        item = self.tree.item(selection[0])
        if not item['values'] or len(item['values']) != len(self.tree['columns']):
            logging.warning(f"Item com valores incompletos ou malformados: {item.get('values')}")
            return None
        return dict(zip(self.tree['columns'], item['values']))

    def _on_item_double_click(self, event):
        """Lida com o duplo clique."""
        column = self.tree.identify_column(event.x)
        data = self._get_selected_item_data()
        if not data: return

        # üîí VERIFICA√á√ÉO PRIORIT√ÅRIA DE PROTE√á√ÉO DE SESS√ÉO
        con_codigo = data.get('db_id')
        session_protection_manager = get_current_session_protection_manager()
        
        if session_protection_manager and session_protection_manager.is_session_protected(con_codigo):
            # Sess√£o protegida - vai diretamente para valida√ß√£o de senha
            logging.info(f"[PROTECTION_ACCESS] Sess√£o {con_codigo} protegida, solicitando senha")
            protection_info = session_protection_manager.get_session_protection_info(con_codigo)
            protected_by = protection_info.get('protected_by', 'Unknown') if protection_info else 'Unknown'
            
            # Mostra di√°logo de valida√ß√£o de senha
            validation_dialog = ValidateSessionPasswordDialog(
                parent=self,
                connection_data=data,
                requesting_user=self.user_session_name,
                protected_by=protected_by
            )
            
            # Aguarda resultado da valida√ß√£o
            validation_dialog.wait_window()
            result = validation_dialog.get_result()
            
            if not result or not result.get("validated"):
                # Acesso negado - n√£o prossegue
                logging.warning(f"üîí Acesso negado para {self.user_session_name} ao servidor protegido {data.get('title')}")
                messagebox.showwarning(
                    "Acesso Negado", 
                    f"N√£o foi poss√≠vel acessar o servidor '{data.get('title')}'.\n\n"
                    "A sess√£o est√° protegida e voc√™ n√£o forneceu a senha correta."
                )
                return
            
            # Acesso autorizado - prossegue com a conex√£o
            logging.info(f"üîì Acesso autorizado para {self.user_session_name} ao servidor protegido {data.get('title')}")
            # Continua para executar a conex√£o normalmente
        
        elif data.get('username') and column != '#2':
            # Conex√£o em uso mas SEM prote√ß√£o - oferece op√ß√µes colaborativas
            choice = self._show_connection_in_use_dialog(data)
            if choice == "cancel":
                return
            elif choice == "collaborative":
                self._request_collaborative_access(data)
                return
            # Se choice == "force", continua normalmente

        if column == '#2' and data.get('wiki_link'):
            particularidades = parse_particularities(data['wiki_link']) 
            
            if not particularidades:
                messagebox.showinfo("Informa√ß√£o", "Nenhum link de wiki dispon√≠vel.")
                return
            
            if len(particularidades) == 1:
                try:
                    webbrowser.open_new(particularidades[0][1])
                except Exception as e:
                    messagebox.showerror("Erro", f"N√£o foi poss√≠vel abrir o link:\n{e}")
            else:
                dialog = ClientSelectorDialog(self, particularidades, f"Clientes - {data['title']}")
                self.wait_window(dialog)
                selected_link = dialog.get_selected_link()
                if selected_link:
                    try:
                        webbrowser.open_new(selected_link)
                    except Exception as e:
                        messagebox.showerror("Erro", f"N√£o foi poss√≠vel abrir o link:\n{e}")
        else:
            # Verifica o tipo de conex√£o (NOVO)
            con_tipo = 'RDP' # Valor padr√£o
            # Busca o row original no cache para pegar o 'con_tipo'
            try:
                row_original = next(r for r in self.data_cache if r.con_codigo == int(data['db_id']))
                con_tipo = row_original.con_tipo
            except (StopIteration, IndexError):
                 logging.warning(f"N√£o foi poss√≠vel encontrar o tipo da conex√£o {data['db_id']} no cache. Usando RDP padr√£o.")

            # --- AQUI VOC√ä ADICIONARIA A L√ìGICA PARA OUTROS TIPOS ---
            # if con_tipo == 'SSH':
            #     Thread(target=self._connect_ssh, args=(data,), daemon=True).start()
            # elif con_tipo == 'VNC':
            #     Thread(target=self._connect_vnc, args=(data,), daemon=True).start()
            # else: # RDP ou tipo desconhecido
            #     Thread(target=self._connect_rdp, args=(data,), daemon=True).start()
            
            # Por enquanto, s√≥ chama RDP
            Thread(target=self._connect_rdp, args=(data,), daemon=True).start()


    def _show_context_menu(self, event):
        item_id = self.tree.identify_row(event.y)
        if item_id:
            self.tree.selection_set(item_id)
            self.context_menu.post(event.x_root, event.y_root)

    def _update_username_cell(self, item_id: str, new_username: str):
        """Atualiza a c√©lula do nome de usu√°rio na UI de forma segura."""
        def update_task():
            try:
                if self.tree.exists(item_id):
                    current_values = list(self.tree.item(item_id, 'values'))
                    if len(current_values) > 7:
                        current_values[7] = new_username
                        self.tree.item(item_id, values=tuple(current_values))
            except Exception as e:
                logging.warning(f"Erro ao atualizar c√©lula da UI: {e}")
        self.after(0, update_task)

    def _execute_connection(self, data: Dict[str, Any], connection_func, *args): 
        """
        Lida com a l√≥gica de log, heartbeat e atualiza√ß√£o da UI 
        para qualquer tipo de conex√£o (esta vers√£o √© apenas para RDP/Gerenciada).
        """
        selection = self.tree.selection()
        if not selection: return
        selected_item_id = selection[0]
        con_codigo = int(data['db_id'])
        username = self.user_session_name

        if con_codigo in self.active_heartbeats:
            logging.warning(f"Tentativa de reconectar a {con_codigo} enquanto j√° h√° um heartbeat ativo.")
            return

        # Registro da conex√£o com usu√°rio WATS completo para auditoria
        if not self.db.logs.insert_connection_log(con_codigo, self.user_session_name, self.user_ip, self.computer_name, self.os_user):
            messagebox.showwarning("Aviso", "N√£o foi poss√≠vel registrar o in√≠cio da conex√£o.")
            return
        
        try:
            current_users = self.tree.item(selected_item_id, 'values')[7]
            new_users = username if not current_users else f"{current_users}|{username}"
            self._update_username_cell(selected_item_id, new_users)
        except (IndexError, Exception):
            pass
        
        stop_event = Event()
        self.active_heartbeats[con_codigo] = stop_event

        def heartbeat_task(con_id, user, stop_flag: Event):
            """Thread que envia heartbeats a cada 60 segundos."""
            logging.info(f"[HB {con_id}] Heartbeat iniciado para {user}.")
            while not stop_flag.wait(60): 
                if not self.db.logs.update_heartbeat(con_id, user):
                    logging.warning(f"[HB {con_id}] Falha ao enviar heartbeat.")
            logging.info(f"[HB {con_id}] Heartbeat parado para {user}.")

        hb_thread = Thread(
            target=heartbeat_task, 
            args=(con_codigo, self.user_session_name, stop_event), 
            daemon=True
        )
        hb_thread.start()
        
        log_id = None
        try:
            # Registra o log de acesso detalhado
            con_tipo = 'RDP' # Padr√£o
            con_nome = data.get('title', 'N/A')
            try:
                row_original = next(r for r in self.data_cache if r.con_codigo == con_codigo)
                con_tipo = row_original.con_tipo
                con_nome = row_original.nome
            except (StopIteration, IndexError):
                 logging.warning(f"N√£o foi poss√≠vel encontrar o tipo/nome da conex√£o {con_codigo} no cache para log.")

            # Agora incluindo o usu√°rio WATS no log de acesso
            user_machine_info = f"{self.user_session_name}@{self.computer_name}"
            log_id = self.db.logs.log_access_start(user_machine_info, con_codigo, con_nome, con_tipo)

            # Executa a conex√£o (rdp.exe, mstsc, etc.)
            # Esta fun√ß√£o √© bloqueante (espera o processo RDP fechar)
            connection_func(*args)
            
        finally:
            # Esta se√ß√£o 'finally' √© executada assim que 'connection_func' termina
            logging.info(f"Conex√£o {con_codigo} fechada pelo usu√°rio {username}.")
            
            # Finaliza o log de acesso detalhado
            if log_id:
                self.db.logs.log_access_end(log_id)

            # Para o heartbeat
            stop_event.set()
            if con_codigo in self.active_heartbeats:
                del self.active_heartbeats[con_codigo]
            
            # Deleta o log de conex√£o ativa usando usu√°rio WATS
            if self.db.logs.delete_connection_log(con_codigo, self.user_session_name):
                try:
                    if self.tree.exists(selected_item_id):
                        current_users = self.tree.item(selected_item_id, 'values')[7]
                        if current_users:
                            users_list = [u for u in current_users.split('|') if u != username]
                            new_users = '|'.join(users_list)
                            self._update_username_cell(selected_item_id, new_users)
                except (IndexError, Exception) as e:
                    logging.warning(f"Erro ao limpar UI ap√≥s desconex√£o: {e}")
                    self.after(0, self._populate_tree)
            else:
                logging.error(f"Falha ao deletar log de {con_codigo}. For√ßando refresh.")
                self.after(0, self._populate_tree)
    
    def _connect_rdp(self, data: Dict[str, Any]):
        """Conecta usando o execut√°vel rdp.exe customizado."""
        
        con_codigo = data.get('db_id')
        
        # DEBUG: Verificar se logging est√° funcionando
        print(f"[DEBUG CONSOLE] Iniciando conex√£o RDP para {data.get('title')}")
        logging.info(f"[DEBUG LOGGING] Iniciando conex√£o RDP para {data.get('title')}")
        
        # DEBUG: Verificar onde est√£o os logs
        from .config import LOG_FILE, USER_DATA_DIR
        print(f"[DEBUG] USER_DATA_DIR: {USER_DATA_DIR}")
        print(f"[DEBUG] LOG_FILE: {LOG_FILE}")
        print(f"[DEBUG] Log file exists: {os.path.exists(LOG_FILE)}")
        
        # Verificar handlers do logger
        root_logger = logging.getLogger()
        print(f"[DEBUG] Logger level: {root_logger.level}")
        print(f"[DEBUG] Logger handlers: {len(root_logger.handlers)}")
        for i, handler in enumerate(root_logger.handlers):
            print(f"[DEBUG] Handler {i}: {type(handler).__name__}")
        
        rdp_exe_path = os.path.join(ASSETS_DIR, 'rdp.exe')
        
        # Debug detalhado para localizar o rdp.exe
        logging.info(f"[RDP] BASE_DIR: {BASE_DIR}")
        logging.info(f"[RDP] ASSETS_DIR: {ASSETS_DIR}")
        logging.info(f"[RDP] Procurando rdp.exe em: {rdp_exe_path}")
        logging.info(f"[RDP] sys.frozen: {getattr(sys, 'frozen', False)}")
        logging.info(f"[RDP] sys.executable: {sys.executable}")
        
        if not os.path.exists(rdp_exe_path):
            # Tenta localizar o rdp.exe em outros locais poss√≠veis
            possible_paths = [
                os.path.join(os.path.dirname(sys.executable), 'assets', 'rdp.exe'),
                os.path.join(os.path.dirname(sys.executable), '_internal', 'assets', 'rdp.exe'),
                os.path.join(os.getcwd(), 'assets', 'rdp.exe'),
                os.path.join(BASE_DIR, '..', 'assets', 'rdp.exe')
            ]
            
            found_path = None
            for path in possible_paths:
                logging.info(f"[RDP] Tentando: {path}")
                if os.path.exists(path):
                    found_path = path
                    logging.info(f"[RDP] Encontrado rdp.exe em: {path}")
                    break
            
            if found_path:
                rdp_exe_path = found_path
            else:
                logging.error(f"[RDP] rdp.exe n√£o encontrado em nenhum local")
                messagebox.showerror("Erro", f"Execut√°vel n√£o encontrado:\n{rdp_exe_path}\n\nCaminhos testados:\n" + "\n".join(possible_paths))
                return
        
        # Start recording if enabled
        session_id = None
        if self.recording_manager and self.settings.RECORDING_ENABLED and self.settings.RECORDING_AUTO_START:
            import time
            session_id = f"rdp_{data.get('db_id', 'unknown')}_{int(time.time())}"
            connection_info = {
                'con_codigo': data.get('db_id'),
                'ip': data.get('ip'),
                'name': data.get('title'),
                'user': data.get('user'),
                'connection_type': 'RDP',
                # NOVO: Informa√ß√µes do usu√°rio WATS para auditoria
                'wats_user': self.user_session_name,
                'wats_user_machine': self.computer_name,
                'wats_user_ip': self.user_ip,
                'session_timestamp': int(time.time())
            }
            
            if self.recording_manager.start_session_recording(session_id, connection_info):
                logging.info(f"Recording started for RDP connection to {data.get('ip')}")
            else:
                logging.warning(f"Failed to start recording for RDP connection to {data.get('ip')}")
        
        def task():
            # Carrega configura√ß√£o do monitor e RDP
            app_config = get_app_config()
            monitor = app_config.get('monitor', 1)
            rdp_config = app_config.get('rdp', {})
            
            # Constr√≥i comando base do RDP
            cmd = [
                rdp_exe_path, f"/v:{data['ip']}", f"/u:{data['user']}", f"/p:{data['pwd']}",
                f"/title:{data['title']}", '/noprinters', '/nosound', '/nowallpaper',
                '/drives:fixed,-c:', f'/mon:{monitor}'
            ]
            
            # Adiciona par√¢metros de janela baseado na configura√ß√£o
            if rdp_config.get('fullscreen', False):
                cmd.append('/f')
            elif rdp_config.get('maximize_window', False):
                cmd.append('/max')
            else:
                # Para janela normal, usa dimens√µes configuradas
                width = rdp_config.get('default_width', 1024)
                height = rdp_config.get('default_height', 768)
                cmd.extend([f'/w:{width}', f'/h:{height}'])
            icon_path = os.path.join(ASSETS_DIR, 'ats.ico') 
            if os.path.exists(icon_path):
                cmd.append(f'/icon:{icon_path}')
            try:
                # Don't log the raw password. Create a masked copy for logging.
                masked_cmd = [c if not c.startswith('/p:') else '/p:***' for c in cmd]
                logging.info(f"Executando RDP: {' '.join(masked_cmd)}")

                # Capture output to show a helpful error message on failure.
                proc = subprocess.run(cmd, capture_output=True, text=True)
                if proc.returncode != 0:
                    # Log full output (server logs may contain useful info)
                    logging.error(f"rdp.exe exit {proc.returncode}. stdout: {proc.stdout}; stderr: {proc.stderr}")
                    # Show a user-friendly error (truncate to avoid huge dialogs)
                    err_msg = proc.stderr.strip() or proc.stdout.strip() or f"Exit code {proc.returncode}"
                    if len(err_msg) > 1000:
                        err_msg = err_msg[:1000] + "... (truncated)"
                    messagebox.showerror("Erro", f"Falha ao executar o rdp.exe:\n{err_msg}\n\n(C√≥digo de sa√≠da: {proc.returncode})")
                else:
                    logging.info(f"RDP connection completed successfully for {data.get('ip')}")
                    
            except FileNotFoundError as e:
                logging.error(f"rdp.exe n√£o encontrado: {e}")
                messagebox.showerror("Erro", f"Execut√°vel rdp.exe n√£o encontrado:\n{e}")
            except Exception as e:
                logging.exception("Erro inesperado ao executar rdp.exe")
                messagebox.showerror("Erro", f"Falha ao executar o rdp.exe:\n{e}")
            finally:
                # Stop recording when RDP session ends
                if session_id and self.recording_manager:
                    if self.recording_manager.stop_session_recording():
                        logging.info(f"Recording stopped for session {session_id}")
                    else:
                        logging.warning(f"Failed to stop recording for session {session_id}")
        
        self._execute_connection(data, task)

    def _connect_native_wts(self):
        """Conecta usando o cliente MSTSC."""
        data = self._get_selected_item_data()
        if not data: return

        con_codigo = data.get('db_id')

        if data.get('username'):
            msg = f"'{data['username']}' j√° est√° conectado(a) a este cliente.\nDeseja continuar e conectar mesmo assim?"
            if not messagebox.askyesno("Alerta: Conex√£o em Uso", msg):
                return

        def task():
            ip = data['ip'].split(':')[0]
            subprocess.run(f'cmdkey /delete:TERMSRV/{ip}', shell=True, capture_output=True)
            subprocess.run(f'cmdkey /generic:TERMSRV/{ip} /user:"{data["user"]}" /pass:"{data["pwd"]}"', shell=True, capture_output=True)
            try:
                subprocess.run(f'mstsc /v:{data["ip"]} /f', shell=True, check=True)
            finally:
                subprocess.run(f'cmdkey /delete:TERMSRV/{ip}', shell=True, capture_output=True)

        Thread(target=lambda: self._execute_connection(data, task), daemon=True).start()

    def _release_connection(self): 
        """Libera uma conex√£o protegida solicitando a senha de prote√ß√£o."""
        data = self._get_selected_item_data()
        if not data: 
            return
        
        con_codigo = data.get('db_id')
        logging.info(f"[RELEASE_DEBUG] Tentando liberar conex√£o {con_codigo}")
        logging.info(f"[RELEASE_DEBUG] Tipo do con_codigo: {type(con_codigo)}")
        
        session_protection_manager = get_current_session_protection_manager()
        logging.info(f"[RELEASE_DEBUG] session_protection_manager existe: {session_protection_manager is not None}")
        if session_protection_manager:
            logging.info(f"[RELEASE_DEBUG] session_protection_manager ID: {getattr(session_protection_manager, 'instance_id', 'NO_ID')}")
            logging.info(f"[RELEASE_DEBUG] session_protection_manager.db_service: {session_protection_manager.db_service is not None}")
            logging.info(f"[RELEASE_DEBUG] session_protection_manager.session_repo: {session_protection_manager.session_repo is not None}")
        try:
            con_codigo = int(con_codigo) if con_codigo else None
            logging.info(f"[RELEASE_DEBUG] con_codigo convertido para int: {con_codigo}")
        except (ValueError, TypeError) as e:
            logging.error(f"[RELEASE_DEBUG] Erro ao converter con_codigo para int: {e}")
            messagebox.showerror("Erro", "ID da conex√£o inv√°lido.")
            return
        
        if not con_codigo:
            logging.error(f"[RELEASE_DEBUG] con_codigo √© None ou inv√°lido")
            messagebox.showerror("Erro", "ID da conex√£o n√£o encontrado.")
            return
        
        if session_protection_manager:
            logging.info(f"[RELEASE_DEBUG] session_protection_manager ID: {getattr(session_protection_manager, 'instance_id', 'NO_ID')}")
            logging.info(f"[RELEASE_DEBUG] session_protection_manager.db_service: {session_protection_manager.db_service is not None}")
            logging.info(f"[RELEASE_DEBUG] session_protection_manager.session_repo: {session_protection_manager.session_repo is not None}")
        
        # Verifica se existe prote√ß√£o de sess√£o
        session_protection_manager = get_current_session_protection_manager()
        
        if not session_protection_manager or not session_protection_manager.is_session_protected(con_codigo):
            logging.info(f"[RELEASE_DEBUG] Sem prote√ß√£o ativa detectada para conex√£o {con_codigo}")
            logging.info(f"[RELEASE_DEBUG] Dados da conex√£o: {data}")
            messagebox.showinfo("Sem Prote√ß√£o", "Este servidor n√£o possui prote√ß√£o ativa para liberar.")
            return
        
        # Obt√©m informa√ß√µes da prote√ß√£o
        protection_info = session_protection_manager.get_session_protection_info(con_codigo)
        protected_by = protection_info.get('protected_by', 'Unknown') if protection_info else 'Unknown'
        
        # Mostra di√°logo de valida√ß√£o de senha para libera√ß√£o
        validation_dialog = ValidateSessionPasswordDialog(
            parent=self,
            connection_data=data,
            requesting_user=self.user_session_name,
            protected_by=protected_by,
            unlock_mode=True  # Indica que √© para liberar a conex√£o
        )
        
        # Aguarda resultado da valida√ß√£o
        validation_dialog.wait_window()
        result = validation_dialog.get_result()
        
        if not result or not result.get("validated"):
            # Senha incorreta - n√£o prossegue com a libera√ß√£o
            logging.warning(f"üîí Tentativa de libera√ß√£o negada para {self.user_session_name} do servidor {data.get('title')}")
            messagebox.showwarning(
                "Acesso Negado", 
                f"N√£o foi poss√≠vel liberar a prote√ß√£o do servidor '{data.get('title')}'.\n\n"
                "Voc√™ n√£o forneceu a senha correta."
            )
            return
        
        # Senha correta - remove a prote√ß√£o
        success = session_protection_manager.remove_session_protection(
            con_codigo,
            self.user_session_name
        )
        
        if success:
            logging.info(f"üîì Conex√£o liberada por {self.user_session_name} para {data.get('title')}")
            messagebox.showinfo(
                "Conex√£o Liberada",
                f"Prote√ß√£o removida com sucesso!\n\n"
                f"O servidor '{data.get('title')}' est√° agora dispon√≠vel para todos os usu√°rios."
            )
            # Atualiza a lista para refletir as mudan√ßas
            self._populate_tree()
        else:
            logging.error(f"Falha ao liberar prote√ß√£o para {data.get('title')}")
            messagebox.showerror(
                "Erro na Libera√ß√£o",
                f"Ocorreu um erro ao tentar liberar a prote√ß√£o.\n\n"
                "Tente novamente ou contate o administrador do sistema."
            )

    def _open_admin_login(self): 
        """Abre o di√°logo para login de administrador."""
        password = ctk.CTkInputDialog(
            text="Digite a senha de Administrador:", 
            title="Login Admin",
            ).get_input()

        if not password:
            return

        # --- ATUALIZADO: Acessa reposit√≥rio de usu√°rios ---
        try:
            admin_hash = self.db.users.get_admin_password_hash()
        except DatabaseError as e:
             messagebox.showerror("Erro de Banco de Dados", f"N√£o foi poss√≠vel verificar a senha:\n{e}")
             return

        if not admin_hash:
            messagebox.showerror("Erro de Configura√ß√£o", "Senha de administrador n√£o encontrada no banco.")
            return
            
        input_hash = hash_password_md5(password) 
        
        if input_hash == admin_hash:
            logging.info(f"Usu√°rio {self.user_session_name} logou como admin.")
            self._open_admin_panel()
        else:
            logging.warning(f"Tentativa falha de login admin por {self.user_session_name}.")
            messagebox.showerror("Acesso Negado", "Senha incorreta.")

    def _open_admin_panel(self): 
        """Abre o HUB de administra√ß√£o."""
        # A inst√¢ncia 'self.db' (que agora √© o DBService) √© passada 
        # para o AdminHub. O AdminHub tamb√©m precisar√° ser refatorado
        # para usar os reposit√≥rios (ex: self.db.users.admin_get_all_users)
        admin_hub = AdminHubDialog(self, self.db) 
        self.wait_window(admin_hub)
        
        logging.info("Painel admin fechado. Recarregando lista de conex√µes.")
        self._populate_tree()
    
    # Sistema de Prote√ß√£o de Sess√µes
    def _protect_session(self):
        """Permite ao usu√°rio atual proteger uma sess√£o com senha."""
        data = self._get_selected_item_data()
        if not data:
            return
        
        con_codigo = data.get('db_id')
        
        session_protection_manager = get_current_session_protection_manager()
        if not CreateSessionProtectionDialog or not session_protection_manager:
            messagebox.showwarning("N√£o Dispon√≠vel", "Sistema de prote√ß√£o de sess√£o n√£o est√° dispon√≠vel.")
            return
        
        # Verifica se j√° existe prote√ß√£o
        if session_protection_manager.is_session_protected(con_codigo):
            existing_protection = session_protection_manager.get_session_protection_info(con_codigo)
            protected_by = existing_protection.get('protected_by', 'Unknown') if existing_protection else 'Unknown'
            
            if protected_by == self.user_session_name:
                messagebox.showinfo(
                    "J√° Protegida", 
                    f"Voc√™ j√° criou uma prote√ß√£o para este servidor.\n\n"
                    f"Use 'Remover Prote√ß√£o' para desativar."
                )
            else:
                messagebox.showinfo(
                    "J√° Protegida", 
                    f"Este servidor j√° est√° protegido por '{protected_by}'.\n\n"
                    f"Apenas o criador da prote√ß√£o pode remov√™-la."
                )
            return
        
        # Adiciona informa√ß√µes necess√°rias ao data
        enhanced_data = data.copy()
        enhanced_data['machine_name'] = self.computer_name
        enhanced_data['ip_address'] = self.user_ip
        
        # Mostra di√°logo de cria√ß√£o de prote√ß√£o
        protection_dialog = CreateSessionProtectionDialog(
            parent=self,
            connection_data=enhanced_data,
            current_user=self.user_session_name
        )
        
        # Aguarda resultado
        protection_dialog.wait_window()
        result = protection_dialog.get_result()
        
        if result and result.get("activated"):
            logging.info(f"üîí Prote√ß√£o criada por {self.user_session_name} para {data.get('title')}")
            messagebox.showinfo(
                "Prote√ß√£o Ativada",
                f"Prote√ß√£o ativada com sucesso!\n\n"
                f"Outros usu√°rios precisar√£o da senha para acessar '{data.get('title')}'."
            )
        else:
            logging.info(f"Cria√ß√£o de prote√ß√£o cancelada por {self.user_session_name}")

    def _remove_session_protection(self):
        """Remove prote√ß√£o de sess√£o criada pelo usu√°rio atual."""
        data = self._get_selected_item_data()
        if not data:
            return
        
        con_codigo = data.get('db_id')
        
        if not session_protection_manager:
            messagebox.showwarning("N√£o Dispon√≠vel", "Sistema de prote√ß√£o de sess√£o n√£o est√° dispon√≠vel.")
            return
        
        # Verifica se existe prote√ß√£o
        if not session_protection_manager.is_session_protected(con_codigo):
            logging.info(f"Data:{ data}")
            messagebox.showinfo("Sem Prote√ß√£o", "Este servidor n√£o possui prote√ß√£o ativa.")
            return
        
        # Verifica informa√ß√µes da prote√ß√£o
        protection_info = session_protection_manager.get_session_protection_info(con_codigo)
        protected_by = protection_info.get('protected_by', 'Unknown') if protection_info else 'Unknown'
        
        # Verifica se o usu√°rio atual √© o criador da prote√ß√£o
        if protected_by != self.user_session_name:
            messagebox.showwarning(
                "N√£o Autorizado",
                f"Esta prote√ß√£o foi criada por '{protected_by}'.\n\n"
                f"Apenas o criador pode remover a prote√ß√£o."
            )
            return
        
        # Confirma remo√ß√£o
        if messagebox.askyesno(
            "Confirmar Remo√ß√£o",
            f"Tem certeza que deseja remover a prote√ß√£o do servidor '{data.get('title')}'?\n\n"
            f"Outros usu√°rios voltar√£o a ter acesso livre."
        ):
            success = session_protection_manager.remove_session_protection(
                con_codigo,
                self.user_session_name
            )
            
            if success:
                logging.info(f"üîì Prote√ß√£o removida por {self.user_session_name} para {data.get('title')}")
                messagebox.showinfo(
                    "Prote√ß√£o Removida",
                    f"Prote√ß√£o removida com sucesso!\n\n"
                    f"O servidor '{data.get('title')}' agora tem acesso livre."
                )
            else:
                messagebox.showerror(
                    "Erro",
                    "Falha ao remover a prote√ß√£o. Tente novamente."
                )
        
    # Recording Manager Callbacks
    def _on_recording_started(self, session_id: str):
        """Called when recording starts."""
        logging.info(f"Recording started for session: {session_id}")
        # Update UI to show recording status if needed
        self.after(0, self._update_recording_status_ui)
    
    def _on_recording_stopped(self, session_id: str):
        """Called when recording stops."""
        logging.info(f"Recording stopped for session: {session_id}")
        # Update UI to show recording status if needed
        self.after(0, self._update_recording_status_ui)
    
    def _on_recording_error(self, session_id: str, error_message: str):
        """Called when recording error occurs."""
        logging.error(f"Recording error for session {session_id}: {error_message}")
        # Show error message to user
        self.after(0, messagebox.showerror, "Recording Error", 
                   f"Recording failed for session {session_id}:\n{error_message}")
    
    def _update_recording_status_ui(self):
        """Update UI to reflect recording status."""
        try:
            if self.recording_manager:
                status = self.recording_manager.get_recording_status()
                # Update window title or status bar to show recording status
                if status.get('is_recording', False):
                    current_title = self.title()
                    if "üî¥" not in current_title:
                        self.title(f"üî¥ {current_title}")
                else:
                    current_title = self.title()
                    if "üî¥" in current_title:
                        self.title(current_title.replace("üî¥ ", ""))
        except Exception as e:
            logging.error(f"Error updating recording status UI: {e}")

    def _check_session_recordings(self, session_id: str = None):
        """
        Verifica se existem grava√ß√µes para uma sess√£o espec√≠fica ou lista todas.
        
        Args:
            session_id: ID da sess√£o para verificar. Se None, lista todas as grava√ß√µes.
            
        Returns:
            List[Dict]: Lista de informa√ß√µes sobre grava√ß√µes encontradas
        """
        if not self.recording_manager:
            return []
        
        try:
            from pathlib import Path
            recordings_dir = Path(self.settings.RECORDING_OUTPUT_DIR)
            recordings_info = []
            
            if session_id:
                # Verifica grava√ß√µes espec√≠ficas da sess√£o
                video_files = list(recordings_dir.glob(f"{session_id}_*.mp4"))
                metadata_file = recordings_dir / f"{session_id}_metadata.json"
                
                if video_files or metadata_file.exists():
                    info = {
                        "session_id": session_id,
                        "video_files": [str(f) for f in video_files],
                        "metadata_file": str(metadata_file) if metadata_file.exists() else None,
                        "total_size_mb": sum(f.stat().st_size for f in video_files) / (1024 * 1024),
                        "file_count": len(video_files)
                    }
                    recordings_info.append(info)
            else:
                # Lista todas as grava√ß√µes
                all_videos = list(recordings_dir.glob("*.mp4"))
                sessions = {}
                
                for video_file in all_videos:
                    # Extrai session_id do nome do arquivo (formato: session_id_part_X.mp4)
                    name_parts = video_file.stem.split('_')
                    if len(name_parts) >= 2:
                        session_id = '_'.join(name_parts[:-2]) if name_parts[-2] == 'part' else '_'.join(name_parts[:-1])
                        
                        if session_id not in sessions:
                            sessions[session_id] = {
                                "session_id": session_id,
                                "video_files": [],
                                "metadata_file": None,
                                "total_size_mb": 0,
                                "file_count": 0
                            }
                        
                        sessions[session_id]["video_files"].append(str(video_file))
                        sessions[session_id]["total_size_mb"] += video_file.stat().st_size / (1024 * 1024)
                        sessions[session_id]["file_count"] += 1
                        
                        # Verifica se existe metadata
                        metadata_file = recordings_dir / f"{session_id}_metadata.json"
                        if metadata_file.exists():
                            sessions[session_id]["metadata_file"] = str(metadata_file)
                
                recordings_info = list(sessions.values())
            
            return recordings_info
            
        except Exception as e:
            logging.error(f"Erro ao verificar grava√ß√µes: {e}")
            return []

    def _show_recording_info(self):
        """Mostra informa√ß√µes sobre grava√ß√µes existentes."""
        recordings = self._check_session_recordings()
        
        if not recordings:
            messagebox.showinfo(
                "Grava√ß√µes", 
                f"Nenhuma grava√ß√£o encontrada.\n\n"
                f"Diret√≥rio de grava√ß√µes: {self.settings.RECORDING_OUTPUT_DIR}"
            )
            return
        
        # Cria uma janela com informa√ß√µes das grava√ß√µes
        info_window = ctk.CTkToplevel(self)
        info_window.title("Informa√ß√µes de Grava√ß√£o")
        info_window.geometry("600x400")
        info_window.transient(self)
        
        # Frame principal
        main_frame = ctk.CTkFrame(info_window)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame, 
            text="üìπ Grava√ß√µes de Sess√£o",
            font=("Segoe UI", 16, "bold")
        )
        title_label.pack(pady=(10, 5))
        
        # Diret√≥rio
        dir_label = ctk.CTkLabel(
            main_frame,
            text=f"Diret√≥rio: {self.settings.RECORDING_OUTPUT_DIR}",
            font=("Segoe UI", 10)
        )
        dir_label.pack(pady=(0, 10))
        
        # Frame scroll√°vel para lista
        scroll_frame = ctk.CTkScrollableFrame(main_frame)
        scroll_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # Lista as grava√ß√µes
        for recording in recordings:
            session_frame = ctk.CTkFrame(scroll_frame)
            session_frame.pack(fill="x", pady=5)
            
            session_info = (
                f"üé• Sess√£o: {recording['session_id']}\n"
                f"üìÅ Arquivos: {recording['file_count']}\n" 
                f"üíæ Tamanho: {recording['total_size_mb']:.1f} MB\n"
                f"üìÑ Metadata: {'‚úÖ' if recording['metadata_file'] else '‚ùå'}"
            )
            
            info_label = ctk.CTkLabel(
                session_frame,
                text=session_info,
                justify="left",
                anchor="w"
            )
            info_label.pack(padx=10, pady=10, fill="x")
        
        # Bot√£o para abrir diret√≥rio
        def open_recordings_dir():
            try:
                import subprocess
                subprocess.run(['explorer', self.settings.RECORDING_OUTPUT_DIR], check=True)
            except Exception as e:
                logging.error(f"Erro ao abrir diret√≥rio: {e}")
                messagebox.showerror("Erro", f"N√£o foi poss√≠vel abrir o diret√≥rio:\n{e}")
        
        open_button = ctk.CTkButton(
            main_frame,
            text="üìÇ Abrir Diret√≥rio de Grava√ß√µes",
            command=open_recordings_dir
        )
        open_button.pack(pady=10)

    # M√©todos para Sistema de Acesso Colaborativo
    
    def _show_connection_in_use_dialog(self, data: Dict[str, Any]) -> str:
        """
        Mostra di√°logo com op√ß√µes quando uma conex√£o est√° em uso.
        
        Returns:
            "cancel", "force", ou "collaborative"
        """
        connected_user = data.get('username', 'Usu√°rio desconhecido')
        connection_name = data.get('title', 'Conex√£o')
        
        # Cria di√°logo customizado
        dialog = ctk.CTkToplevel(self)
        dialog.title("Conex√£o em Uso")
        dialog.geometry("450x300")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()
        
        # Centraliza o di√°logo
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        result = {"choice": "cancel"}
        
        # Frame principal
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # √çcone e t√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="‚ö†Ô∏è Conex√£o em Uso",
            font=("Segoe UI", 18, "bold")
        )
        title_label.grid(row=0, column=0, pady=(10, 20))
        
        # Mensagem
        message = f"'{connected_user}' j√° est√° conectado(a) ao cliente '{connection_name}'."
        message_label = ctk.CTkLabel(
            main_frame,
            text=message,
            font=("Segoe UI", 12),
            wraplength=400
        )
        message_label.grid(row=1, column=0, pady=(0, 20))
        
        # Op√ß√µes
        options_label = ctk.CTkLabel(
            main_frame,
            text="O que voc√™ deseja fazer?",
            font=("Segoe UI", 12, "bold")
        )
        options_label.grid(row=2, column=0, pady=(0, 15))
        
        # Bot√µes de op√ß√£o
        def set_result(choice):
            result["choice"] = choice
            dialog.destroy()
        
        # Acesso colaborativo
        collab_button = ctk.CTkButton(
            main_frame,
            text="ü§ù Solicitar Acesso Colaborativo",
            command=lambda: set_result("collaborative"),
            height=40,
            font=("Segoe UI", 12, "bold"),
            fg_color="#2E8B57",
            hover_color="#228B22"
        )
        collab_button.grid(row=3, column=0, pady=5, sticky="ew", padx=20)
        
        # For√ßar conex√£o
        force_button = ctk.CTkButton(
            main_frame,
            text="‚ö° Conectar Mesmo Assim",
            command=lambda: set_result("force"),
            height=40,
            font=("Segoe UI", 12),
            fg_color="#FF6B35",
            hover_color="#E55039"
        )
        force_button.grid(row=4, column=0, pady=5, sticky="ew", padx=20)
        
        # Cancelar
        cancel_button = ctk.CTkButton(
            main_frame,
            text="‚ùå Cancelar",
            command=lambda: set_result("cancel"),
            height=40,
            font=("Segoe UI", 12),
            fg_color="gray50",
            hover_color="gray40"
        )
        cancel_button.grid(row=5, column=0, pady=(15, 10), sticky="ew", padx=20)
        
        # Tooltip/descri√ß√£o
        desc_label = ctk.CTkLabel(
            main_frame,
            text="üí° Acesso colaborativo gera senha tempor√°ria para uso controlado",
            font=("Segoe UI", 10),
            text_color="gray60"
        )
        desc_label.grid(row=6, column=0, pady=5)
        
        # Aguarda resposta
        dialog.wait_window()
        return result["choice"]
    
    def _request_collaborative_access(self, data: Dict[str, Any]):
        """Verifica se sess√£o est√° protegida e solicita senha."""
        try:
            connection_id = data.get('db_id')
            current_user = self.user_session_name
            
            # Verifica se a sess√£o est√° protegida
            if session_protection_manager.is_session_protected(connection_id):
                protection_info = session_protection_manager.get_session_protection_info(connection_id)
                protected_by = protection_info.get('protected_by', 'Usu√°rio desconhecido')
                
                # Mostra di√°logo de valida√ß√£o de senha
                dialog = ValidateSessionPasswordDialog(
                    self,
                    data,
                    current_user,
                    protected_by
                )
                
                dialog.wait_window()
                result = dialog.get_result()
                
                if result and result.get("validated"):
                    # Senha correta - pode conectar
                    logging.info(f"Acesso autorizado para {current_user} no servidor protegido {data.get('title')}")
                    return True
                else:
                    # Senha incorreta ou cancelado
                    logging.info(f"Acesso negado para {current_user} no servidor protegido {data.get('title')}")
                    return False
            else:
                # Sess√£o n√£o protegida - mostra di√°logo de conex√£o em uso
                self._show_connection_in_use_dialog(data)
                return False
            
        except Exception as e:
            logging.error(f"Erro ao verificar prote√ß√£o de sess√£o: {e}")
            messagebox.showerror("Erro", f"Falha na verifica√ß√£o de prote√ß√£o:\n{e}")
            return False
    
    def _create_session_protection(self, data: Dict[str, Any]):
        """Permite ao usu√°rio conectado criar prote√ß√£o para sua sess√£o."""
        try:
            current_user = self.user_session_name
            
            # Verifica se j√° existe prote√ß√£o ativa
            connection_id = data.get('db_id')
            if session_protection_manager.is_session_protected(connection_id):
                existing_protection = session_protection_manager.get_session_protection_info(connection_id)
                if existing_protection.get('protected_by') == current_user:
                    messagebox.showinfo(
                        "Sess√£o J√° Protegida",
                        f"Esta sess√£o j√° est√° protegida por voc√™.\n\n"
                        f"Criada em: {existing_protection.get('created_at', 'N/A')}\n"
                        f"V√°lida at√©: {existing_protection.get('expiry_time', 'N/A')}"
                    )
                else:
                    messagebox.showwarning(
                        "Sess√£o Protegida por Outro Usu√°rio",
                        f"Esta sess√£o est√° protegida por: {existing_protection.get('protected_by')}"
                    )
                return
            
            # Cria nova prote√ß√£o
            dialog = CreateSessionProtectionDialog(
                self,
                data,
                current_user
            )
            
            dialog.wait_window()
            result = dialog.get_result()
            
            if result and result.get("activated"):
                # Prote√ß√£o criada com sucesso
                logging.info(f"Prote√ß√£o de sess√£o criada por {current_user} para {data.get('title')}")
                
                # Atualiza interface se necess√°rio
                self._populate_tree()
            
        except Exception as e:
            logging.error(f"Erro ao criar prote√ß√£o de sess√£o: {e}")
            messagebox.showerror("Erro", f"Falha ao criar prote√ß√£o:\n{e}")
    
    def _remove_session_protection(self, data: Dict[str, Any]):
        """Remove prote√ß√£o da sess√£o (apenas o criador pode remover)."""
        try:
            connection_id = data.get('db_id')
            current_user = self.user_session_name
            
            if not session_protection_manager.is_session_protected(connection_id):
                messagebox.showinfo("Sess√£o N√£o Protegida", "Esta sess√£o n√£o possui prote√ß√£o ativa.")
                return
            
            # Confirma remo√ß√£o
            confirm = messagebox.askyesno(
                "Remover Prote√ß√£o",
                "Tem certeza que deseja remover a prote√ß√£o desta sess√£o?\n\n"
                "Outros usu√°rios poder√£o acessar o servidor normalmente."
            )
            
            if confirm:
                success = session_protection_manager.remove_session_protection(connection_id, current_user)
                
                if success:
                    messagebox.showinfo(
                        "Prote√ß√£o Removida",
                        "‚úÖ Prote√ß√£o removida com sucesso!\n\nA sess√£o n√£o est√° mais protegida."
                    )
                    logging.info(f"Prote√ß√£o removida por {current_user} da conex√£o {data.get('title')}")
                    
                    # Atualiza interface
                    self._populate_tree()
                else:
                    messagebox.showwarning(
                        "N√£o Autorizado",
                        "Apenas o usu√°rio que criou a prote√ß√£o pode remov√™-la."
                    )
            
        except Exception as e:
            logging.error(f"Erro ao remover prote√ß√£o: {e}")
            messagebox.showerror("Erro", f"Falha ao remover prote√ß√£o:\n{e}")
    
    def _disconnect_other_user(self, connection_id: int, request_data: Dict[str, Any]):
        """Desconecta outro usu√°rio para acesso exclusivo."""
        try:
            connected_user = request_data.get("connected_user")
            if connected_user:
                # For√ßa desconex√£o do outro usu√°rio
                if self.db.logs.delete_connection_log(connection_id, connected_user):
                    logging.info(f"Usu√°rio {connected_user} desconectado para acesso exclusivo")
                    messagebox.showinfo(
                        "Acesso Exclusivo",
                        f"Usu√°rio '{connected_user}' foi desconectado para permitir seu acesso exclusivo."
                    )
                    # Ao desconectar um usu√°rio, tenta liberar quaisquer prote√ß√µes que ele tenha criado
                    try:
                        protection_manager = get_current_session_protection_manager()
                        if protection_manager:
                            protection_manager.cleanup_current_user_protections(connected_user, show_notification=False)
                            logging.info(f"[SESSION_PROTECTION] Prote√ß√µes do usu√°rio {connected_user} verificadas/removidas ap√≥s desconex√£o")
                        else:
                            logging.warning(f"[SESSION_PROTECTION] N√£o foi poss√≠vel obter session_protection_manager para limpar prote√ß√µes de {connected_user}")
                    except Exception as e:
                        logging.error(f"Erro ao limpar prote√ß√µes ap√≥s desconex√£o de {connected_user}: {e}")

                    # Atualiza a visualiza√ß√£o
                    self._populate_tree()
                    
        except Exception as e:
            logging.error(f"Erro ao desconectar outro usu√°rio: {e}")
    
    def _show_active_collaborative_sessions(self):
        """Mostra prote√ß√µes de sess√£o ativas (para administradores)."""
        try:
            current_user = self.user_session_name
            protection_manager = get_current_session_protection_manager()
            if protection_manager:
                user_protections = protection_manager.get_user_protected_sessions(current_user)
                total_protections = len(protection_manager.protected_sessions)
            else:
                logging.warning("[SESSION_PROTECTION] session_protection_manager n√£o dispon√≠vel ao exibir prote√ß√µes ativas")
                user_protections = []
                total_protections = 0
            
            if user_protections:
                protection_list = []
                for protection in user_protections:
                    protection_list.append(f"- {protection.get('connection_name')} (at√© {protection.get('expiry_time', 'N/A')})")
                
                message = f"Suas prote√ß√µes ativas ({len(user_protections)}):\n\n" + "\n".join(protection_list)
                messagebox.showinfo("Prote√ß√µes Ativas", message)
            else:
                messagebox.showinfo("Prote√ß√µes Ativas", "Voc√™ n√£o possui prote√ß√µes de sess√£o ativas.")
            
            if total_protections > 0:
                logging.info(f"Prote√ß√µes de sess√£o ativas no sistema: {total_protections}")
            else:
                logging.info("Nenhuma prote√ß√£o de sess√£o ativa no sistema")
                
        except Exception as e:
            logging.error(f"Erro ao verificar prote√ß√µes ativas: {e}")
    
    def _cleanup_collaborative_sessions(self):
        """Limpa prote√ß√µes de sess√£o criadas pelo usu√°rio atual (chamado no shutdown)."""
        try:
            import os
            current_user = os.getenv('USERNAME', 'unknown')
            
            logging.info(f"üîí SHUTDOWN: Iniciando limpeza de prote√ß√µes para usu√°rio {current_user}")
            
            # Obt√©m a inst√¢ncia atual do session_protection_manager
            protection_manager = get_current_session_protection_manager()
            
            if protection_manager:
                # Remove prote√ß√µes criadas pelo usu√°rio atual (sem notifica√ß√£o gr√°fica no shutdown)
                removed_count = protection_manager.cleanup_current_user_protections(current_user, show_notification=False)
                
                if removed_count > 0:
                    logging.info(f"üîí SHUTDOWN: {removed_count} prote√ß√µes do usu√°rio {current_user} removidas automaticamente")
                
                # Limpeza geral (prote√ß√µes locais)
                protection_manager.cleanup_all_protections()
                logging.info("üîí SHUTDOWN: Limpeza de prote√ß√µes de sess√£o conclu√≠da")
            else:
                logging.warning("üîí SHUTDOWN: session_protection_manager n√£o dispon√≠vel, pulando limpeza de prote√ß√µes")
            
        except Exception as e:
            logging.error(f"Erro na limpeza de prote√ß√µes: {e}")

    def _cleanup_orphaned_protections(self):
        """Executa limpeza de prote√ß√µes √≥rf√£s em background."""
        try:
            protection_manager = get_current_session_protection_manager()
            if protection_manager:
                success, message, count = protection_manager.cleanup_orphaned_protections()
                if count > 0:
                    logging.info(f"üßπ Limpeza autom√°tica: {count} prote√ß√µes √≥rf√£s removidas")
        except Exception as e:
            logging.error(f"Erro na limpeza autom√°tica de prote√ß√µes: {e}")