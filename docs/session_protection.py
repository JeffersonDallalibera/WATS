# WATS_Project/wats_app/session_protection.py - Sistema de Prote√ß√£o de Sess√£o CORRETO

import customtkinter as ctk
import logging
import secrets
import string
import time
from tkinter import messagebox
from typing import Optional, Dict, Any, Callable, List
from datetime import datetime, timedelta


class CreateSessionProtectionDialog(ctk.CTkToplevel):
    """
    Di√°logo para o usu√°rio CONECTADO criar prote√ß√£o em sua sess√£o.
    
    Fluxo: Usu√°rio A (conectado) clica bot√£o direito ‚Üí "Proteger Sess√£o" ‚Üí Define senha
    """
    
    def __init__(self, parent, connection_data: Dict[str, Any], current_user: str):
        super().__init__(parent)
        
        self.connection_data = connection_data
        self.current_user = current_user
        self.protection_password = None
        self.result = None
        
        self._setup_ui()
        self._center_window()
        
        # Configura√ß√µes da janela
        self.title("üîí Proteger Sess√£o")
        self.geometry("480x450")
        self.resizable(False, False)
        self.transient(parent)
        self.grab_set()
        
        # Auto-foco no primeiro campo
        self.after(100, lambda: self.password_entry.focus())

    def _setup_ui(self):
        """Configura a interface do di√°logo."""
        
        # Frame principal
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üîí Proteger Sua Sess√£o",
            font=("Segoe UI", 18, "bold")
        )
        title_label.grid(row=0, column=0, pady=(10, 20), sticky="ew")
        
        # Informa√ß√µes da conex√£o
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.grid(row=1, column=0, pady=(0, 15), sticky="ew", padx=10)
        info_frame.grid_columnconfigure(1, weight=1)
        
        # Servidor
        ctk.CTkLabel(info_frame, text="Servidor:", font=("Segoe UI", 12, "bold")).grid(
            row=0, column=0, padx=10, pady=5, sticky="w"
        )
        ctk.CTkLabel(info_frame, text=self.connection_data.get('title', 'N/A')).grid(
            row=0, column=1, padx=10, pady=5, sticky="w"
        )
        
        # Usu√°rio conectado
        ctk.CTkLabel(info_frame, text="Voc√™ (conectado):", font=("Segoe UI", 12, "bold")).grid(
            row=1, column=0, padx=10, pady=5, sticky="w"
        )
        ctk.CTkLabel(info_frame, text=self.current_user, text_color="#2E8B57").grid(
            row=1, column=1, padx=10, pady=5, sticky="w"
        )
        
        # Explica√ß√£o
        explanation_frame = ctk.CTkFrame(main_frame, fg_color="#2E8B57")
        explanation_frame.grid(row=2, column=0, pady=(0, 15), sticky="ew", padx=10)
        
        explanation_label = ctk.CTkLabel(
            explanation_frame,
            text="üõ°Ô∏è Criar prote√ß√£o tempor√°ria para sua sess√£o\n\nOutros usu√°rios precisar√£o da senha que voc√™ definir para acessar este servidor.\nVoc√™ mant√©m controle total sobre quem pode conectar.",
            font=("Segoe UI", 11),
            text_color="white",
            wraplength=420
        )
        explanation_label.pack(padx=15, pady=15)
        
        # Configura√ß√£o da senha
        password_frame = ctk.CTkFrame(main_frame)
        password_frame.grid(row=3, column=0, pady=(0, 15), sticky="ew", padx=10)
        password_frame.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(password_frame, text="üîê Configura√ß√£o da Prote√ß√£o", 
                    font=("Segoe UI", 14, "bold")).grid(
            row=0, column=0, columnspan=2, padx=10, pady=10
        )
        
        # Senha personalizada
        ctk.CTkLabel(password_frame, text="Senha de prote√ß√£o:", font=("Segoe UI", 12, "bold")).grid(
            row=1, column=0, padx=10, pady=(5, 5), sticky="w"
        )
        
        self.password_entry = ctk.CTkEntry(
            password_frame,
            placeholder_text="Digite uma senha (6-20 caracteres)",
            show="*",
            width=200
        )
        self.password_entry.grid(row=1, column=1, padx=10, pady=(5, 5), sticky="ew")
        
        # Bot√£o gerar senha
        generate_button = ctk.CTkButton(
            password_frame,
            text="üé≤ Gerar Autom√°tica",
            command=self._generate_password,
            width=120,
            height=28
        )
        generate_button.grid(row=2, column=1, padx=10, pady=(5, 10), sticky="w")
        
        # Dura√ß√£o da prote√ß√£o
        ctk.CTkLabel(password_frame, text="Dura√ß√£o da prote√ß√£o:", font=("Segoe UI", 12, "bold")).grid(
            row=3, column=0, padx=10, pady=(5, 5), sticky="w"
        )
        
        self.duration_var = ctk.StringVar(value="60")
        duration_frame = ctk.CTkFrame(password_frame, fg_color="transparent")
        duration_frame.grid(row=3, column=1, padx=10, pady=(5, 5), sticky="ew")
        
        ctk.CTkRadioButton(
            duration_frame,
            text="30 minutos",
            variable=self.duration_var,
            value="30"
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkRadioButton(
            duration_frame,
            text="1 hora",
            variable=self.duration_var,
            value="60"
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkRadioButton(
            duration_frame,
            text="2 horas",
            variable=self.duration_var,
            value="120"
        ).pack(side="left")
        
        # Observa√ß√µes opcionais
        ctk.CTkLabel(main_frame, text="Observa√ß√µes (opcional):", font=("Segoe UI", 12)).grid(
            row=4, column=0, padx=10, pady=(5, 5), sticky="w"
        )
        
        self.notes_entry = ctk.CTkTextbox(
            main_frame,
            height=60,
            placeholder_text="Ex: Trabalho cr√≠tico at√© 18h, manuten√ß√£o em andamento..."
        )
        self.notes_entry.grid(row=5, column=0, padx=10, pady=(0, 15), sticky="ew")
        
        # Bot√µes
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.grid(row=6, column=0, pady=10, sticky="ew")
        button_frame.grid_columnconfigure(0, weight=1)
        button_frame.grid_columnconfigure(1, weight=1)
        
        cancel_button = ctk.CTkButton(
            button_frame,
            text="Cancelar",
            command=self._cancel,
            fg_color="gray50",
            hover_color="gray40"
        )
        cancel_button.grid(row=0, column=0, padx=(0, 5), pady=5, sticky="ew")
        
        protect_button = ctk.CTkButton(
            button_frame,
            text="üîí Ativar Prote√ß√£o",
            command=self._activate_protection,
            font=("Segoe UI", 12, "bold")
        )
        protect_button.grid(row=0, column=1, padx=(5, 0), pady=5, sticky="ew")

    def _center_window(self):
        """Centraliza a janela na tela."""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f"{width}x{height}+{x}+{y}")

    def _generate_password(self):
        """Gera uma senha autom√°tica."""
        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(8))
        self.password_entry.delete(0, "end")
        self.password_entry.insert(0, password)
        
        # Mostra a senha gerada
        messagebox.showinfo(
            "Senha Gerada",
            f"Senha autom√°tica gerada: {password}\n\nGuarde esta senha para compartilhar com quem precisar acessar."
        )

    def _activate_protection(self):
        """Ativa a prote√ß√£o da sess√£o."""
        
        # Valida√ß√£o da senha
        password = self.password_entry.get().strip()
        if not password or len(password) < 6:
            messagebox.showwarning(
                "Senha Necess√°ria", 
                "Por favor, digite uma senha com pelo menos 6 caracteres"
            )
            self.password_entry.focus()
            return
        
        if len(password) > 20:
            messagebox.showwarning(
                "Senha Muito Longa", 
                "A senha deve ter no m√°ximo 20 caracteres"
            )
            self.password_entry.focus()
            return
        
        try:
            duration_minutes = int(self.duration_var.get())
            notes = self.notes_entry.get("1.0", "end-1c").strip()
            
            # Calcula expira√ß√£o
            expiry_time = datetime.now() + timedelta(minutes=duration_minutes)
            
            # Dados da prote√ß√£o
            protection_data = {
                "connection_id": self.connection_data.get('db_id'),
                "connection_name": self.connection_data.get('title'),
                "protected_by": self.current_user,
                "password": password,
                "duration_minutes": duration_minutes,
                "expiry_time": expiry_time.isoformat(),
                "created_at": datetime.now().isoformat(),
                "notes": notes,
                "status": "active"
            }
            
            # Registra a prote√ß√£o
            self._log_protection_created(protection_data)
            
            # Ativa no gerenciador
            session_protection_manager.activate_session_protection(
                self.connection_data.get('db_id'),
                password,
                protection_data
            )
            
            # Mostra confirma√ß√£o
            self._show_protection_confirmation(expiry_time, password)
            
            self.protection_password = password
            self.result = {
                "activated": True,
                "password": password,
                "expiry_time": expiry_time,
                "protection_data": protection_data
            }
            
            self.destroy()
            
        except Exception as e:
            logging.error(f"Erro ao ativar prote√ß√£o: {e}")
            messagebox.showerror("Erro", f"Falha ao ativar prote√ß√£o:\n{e}")

    def _log_protection_created(self, protection_data: Dict[str, Any]):
        """Registra a cria√ß√£o da prote√ß√£o nos logs."""
        try:
            log_message = (
                f"üîí PROTE√á√ÉO DE SESS√ÉO ATIVADA - "
                f"Servidor: {protection_data['connection_name']} | "
                f"Protegido por: {protection_data['protected_by']} | "
                f"Dura√ß√£o: {protection_data['duration_minutes']} min | "
                f"Observa√ß√µes: {protection_data['notes'][:50]}..."
            )
            
            logging.info(log_message)
            
        except Exception as e:
            logging.error(f"Erro ao registrar log de prote√ß√£o: {e}")

    def _show_protection_confirmation(self, expiry_time: datetime, password: str):
        """Mostra confirma√ß√£o da prote√ß√£o ativada."""
        expiry_str = expiry_time.strftime("%d/%m/%Y %H:%M:%S")
        message = (
            f"üîí PROTE√á√ÉO ATIVADA COM SUCESSO!\n\n"
            f"Senha de prote√ß√£o: {password}\n"
            f"V√°lida at√©: {expiry_str}\n\n"
            f"‚úÖ Sua sess√£o est√° protegida!\n"
            f"‚úÖ Outros usu√°rios precisar√£o desta senha para acessar\n"
            f"‚úÖ Voc√™ pode desativar a prote√ß√£o a qualquer momento"
        )
        messagebox.showinfo("Prote√ß√£o Ativada", message)

    def _cancel(self):
        """Cancela a cria√ß√£o da prote√ß√£o."""
        self.result = {"activated": False}
        self.destroy()

    def get_result(self) -> Optional[Dict[str, Any]]:
        """Retorna o resultado da prote√ß√£o."""
        return self.result


class ValidateSessionPasswordDialog(ctk.CTkToplevel):
    """
    Di√°logo para validar senha de sess√£o protegida.
    
    Fluxo: Usu√°rio B tenta acessar ‚Üí Recebe este di√°logo ‚Üí Digita senha do Usu√°rio A
    """
    
    def __init__(self, parent, connection_data: Dict[str, Any], requesting_user: str, protected_by: str):
        super().__init__(parent)
        
        self.connection_data = connection_data
        self.requesting_user = requesting_user
        self.protected_by = protected_by
        self.result = None
        
        self._setup_ui()
        self._center_window()
        
        # Configura√ß√µes da janela
        self.title("üîí Sess√£o Protegida")
        self.geometry("450x350")
        self.resizable(False, False)
        self.transient(parent)
        self.grab_set()
        
        # Auto-foco no campo senha
        self.after(100, lambda: self.password_entry.focus())

    def _setup_ui(self):
        """Configura a interface do di√°logo."""
        
        # Frame principal
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üîí Sess√£o Protegida",
            font=("Segoe UI", 18, "bold")
        )
        title_label.grid(row=0, column=0, pady=(10, 20), sticky="ew")
        
        # Informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.grid(row=1, column=0, pady=(0, 15), sticky="ew", padx=10)
        info_frame.grid_columnconfigure(1, weight=1)
        
        # Servidor
        ctk.CTkLabel(info_frame, text="Servidor:", font=("Segoe UI", 12, "bold")).grid(
            row=0, column=0, padx=10, pady=5, sticky="w"
        )
        ctk.CTkLabel(info_frame, text=self.connection_data.get('title', 'N/A')).grid(
            row=0, column=1, padx=10, pady=5, sticky="w"
        )
        
        # Protegido por
        ctk.CTkLabel(info_frame, text="Protegido por:", font=("Segoe UI", 12, "bold")).grid(
            row=1, column=0, padx=10, pady=5, sticky="w"
        )
        ctk.CTkLabel(info_frame, text=self.protected_by, text_color="#FF6B35").grid(
            row=1, column=1, padx=10, pady=5, sticky="w"
        )
        
        # Aviso
        warning_frame = ctk.CTkFrame(main_frame, fg_color="#FF6B35")
        warning_frame.grid(row=2, column=0, pady=(0, 15), sticky="ew", padx=10)
        
        warning_label = ctk.CTkLabel(
            warning_frame,
            text="üîí Esta sess√£o est√° protegida!\n\nO usu√°rio conectado definiu uma senha de prote√ß√£o.\nDigite a senha para acessar o servidor.",
            font=("Segoe UI", 11, "bold"),
            text_color="white",
            wraplength=400
        )
        warning_label.pack(padx=15, pady=15)
        
        # Campo senha
        password_frame = ctk.CTkFrame(main_frame)
        password_frame.grid(row=3, column=0, pady=(0, 15), sticky="ew", padx=10)
        password_frame.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(password_frame, text="üîê Senha de Prote√ß√£o", 
                    font=("Segoe UI", 14, "bold")).grid(
            row=0, column=0, columnspan=2, padx=10, pady=10
        )
        
        ctk.CTkLabel(password_frame, text="Senha:", font=("Segoe UI", 12, "bold")).grid(
            row=1, column=0, padx=10, pady=5, sticky="w"
        )
        
        self.password_entry = ctk.CTkEntry(
            password_frame,
            placeholder_text="Digite a senha de prote√ß√£o",
            show="*",
            width=250
        )
        self.password_entry.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
        
        # Bind Enter para validar
        self.password_entry.bind("<Return>", lambda e: self._validate_password())
        
        # Instru√ß√µes
        instructions_label = ctk.CTkLabel(
            main_frame,
            text="üí° Dica: Entre em contato com o usu√°rio conectado para obter a senha",
            font=("Segoe UI", 10),
            text_color="gray"
        )
        instructions_label.grid(row=4, column=0, padx=10, pady=(0, 15))
        
        # Bot√µes
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.grid(row=5, column=0, pady=10, sticky="ew")
        button_frame.grid_columnconfigure(0, weight=1)
        button_frame.grid_columnconfigure(1, weight=1)
        
        cancel_button = ctk.CTkButton(
            button_frame,
            text="Cancelar",
            command=self._cancel,
            fg_color="gray50",
            hover_color="gray40"
        )
        cancel_button.grid(row=0, column=0, padx=(0, 5), pady=5, sticky="ew")
        
        validate_button = ctk.CTkButton(
            button_frame,
            text="üîì Validar Senha",
            command=self._validate_password,
            font=("Segoe UI", 12, "bold")
        )
        validate_button.grid(row=0, column=1, padx=(5, 0), pady=5, sticky="ew")

    def _center_window(self):
        """Centraliza a janela na tela."""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f"{width}x{height}+{x}+{y}")

    def _validate_password(self):
        """Valida a senha de prote√ß√£o."""
        
        password = self.password_entry.get().strip()
        if not password:
            messagebox.showwarning("Senha Necess√°ria", "Por favor, digite a senha de prote√ß√£o")
            self.password_entry.focus()
            return
        
        try:
            # Valida no gerenciador
            validation = session_protection_manager.validate_session_password(
                self.connection_data.get('db_id'),
                password,
                self.requesting_user
            )
            
            if validation["valid"]:
                # Senha correta
                logging.info(f"Senha de prote√ß√£o validada para {self.requesting_user} no servidor {self.connection_data.get('title')}")
                
                self.result = {
                    "validated": True,
                    "password": password,
                    "protection_data": validation["protection_data"]
                }
                
                messagebox.showinfo(
                    "Acesso Liberado",
                    "‚úÖ Senha correta!\n\nAcesso ao servidor liberado."
                )
                
                self.destroy()
                
            else:
                # Senha incorreta
                messagebox.showerror("Senha Incorreta", validation["reason"])
                self.password_entry.delete(0, "end")
                self.password_entry.focus()
                
        except Exception as e:
            logging.error(f"Erro ao validar senha de prote√ß√£o: {e}")
            messagebox.showerror("Erro", f"Falha na valida√ß√£o:\n{e}")

    def _cancel(self):
        """Cancela a valida√ß√£o."""
        self.result = {"validated": False}
        self.destroy()

    def get_result(self) -> Optional[Dict[str, Any]]:
        """Retorna o resultado da valida√ß√£o."""
        return self.result


class SessionProtectionManager:
    """
    Gerenciador de prote√ß√£o de sess√£o - IMPLEMENTA√á√ÉO COM SERVIDOR.
    
    Funcionalidades:
    1. Usu√°rio conectado CRIA prote√ß√£o com senha no servidor
    2. Outros usu√°rios VALIDAM a senha via servidor
    3. Prote√ß√£o tem expira√ß√£o autom√°tica no banco
    4. Logs completos de todas as a√ß√µes
    """
    
    def __init__(self, db_service=None):
        self.db_service = db_service
        self.session_repo = None
        if self.db_service:
            try:
                from src.wats.db.repositories.session_protection_repository import SessionProtectionRepository
                self.session_repo = SessionProtectionRepository(self.db_service.db_manager)
            except ImportError:
                logging.warning("SessionProtectionRepository n√£o encontrado, usando modo local")
        
        # Fallback para modo local (testes e compatibilidade)
        self.protected_sessions: Dict[int, Dict[str, Any]] = {}
        self.cleanup_interval = 300  # 5 minutos
        self.last_cleanup = time.time()

    def activate_session_protection(self, connection_id: int, password: str, protection_data: Dict[str, Any]):
        """Ativa prote√ß√£o para uma sess√£o no servidor."""
        
        # Tenta usar o reposit√≥rio do servidor
        if self.session_repo:
            try:
                user_name = protection_data.get('protected_by', 'unknown')
                machine_name = protection_data.get('machine_name', 'unknown')
                duration_minutes = protection_data.get('duration_minutes', 60)
                notes = protection_data.get('notes', '')
                ip_address = protection_data.get('ip_address')
                
                success, message, protection_id = self.session_repo.create_session_protection(
                    con_codigo=connection_id,
                    user_name=user_name,
                    machine_name=machine_name,
                    password=password,
                    duration_minutes=duration_minutes,
                    notes=notes,
                    ip_address=ip_address
                )
                
                if success:
                    logging.info(f"Prote√ß√£o criada no servidor - ID: {protection_id}, Conex√£o: {connection_id}")
                    return True
                else:
                    logging.error(f"Falha ao criar prote√ß√£o no servidor: {message}")
                    # Fallback para modo local
                    
            except Exception as e:
                logging.error(f"Erro ao acessar servidor para criar prote√ß√£o: {e}")
                # Fallback para modo local
        
        # Modo local (fallback)
        self.protected_sessions[connection_id] = {
            "password": password,
            "protection_data": protection_data,
            "created_at": datetime.now().isoformat()
        }
        
        logging.info(f"Prote√ß√£o ativada localmente para conex√£o {connection_id} por {protection_data.get('protected_by')}")
        return True

    def is_session_protected(self, connection_id: int) -> bool:
        """Verifica se uma sess√£o est√° protegida (servidor ou local)."""
        
        # Verifica no servidor primeiro
        if self.session_repo:
            try:
                protections = self.session_repo.get_active_protections_by_connection(connection_id)
                if protections:
                    return True
            except Exception as e:
                logging.error(f"Erro ao verificar prote√ß√£o no servidor: {e}")
        
        # Verifica localmente (fallback)
        self._cleanup_expired_protections()
        return connection_id in self.protected_sessions

    def get_session_protection_info(self, connection_id: int) -> Optional[Dict[str, Any]]:
        """Retorna informa√ß√µes da prote√ß√£o ativa."""
        self._cleanup_expired_protections()
        
        if connection_id in self.protected_sessions:
            return self.protected_sessions[connection_id]["protection_data"]
        return None

    def validate_session_password(self, connection_id: int, password: str, requesting_user: str) -> Dict[str, Any]:
        """
        Valida senha de prote√ß√£o de sess√£o no servidor.
        
        Returns:
            Dict com resultado da valida√ß√£o
        """
        
        # Tenta validar no servidor primeiro
        if self.session_repo:
            try:
                import socket
                machine_name = socket.gethostname()
                ip_address = socket.gethostbyname(socket.gethostname())
                
                result = self.session_repo.validate_session_password(
                    con_codigo=connection_id,
                    password=password,
                    requesting_user=requesting_user,
                    requesting_machine=machine_name,
                    ip_address=ip_address
                )
                
                if result.get("valid"):
                    logging.info(f"üîì ACESSO AUTORIZADO VIA SERVIDOR - Usu√°rio: {requesting_user} | Conex√£o: {connection_id}")
                else:
                    logging.warning(f"üîí ACESSO NEGADO VIA SERVIDOR - Usu√°rio: {requesting_user} | Raz√£o: {result.get('message')}")
                
                return result
                
            except Exception as e:
                logging.error(f"Erro ao validar senha no servidor: {e}")
                # Fallback para modo local
        
        # Valida√ß√£o local (fallback)
        self._cleanup_expired_protections()
        
        if connection_id not in self.protected_sessions:
            return {
                "valid": False,
                "reason": "Esta sess√£o n√£o est√° protegida (local)"
            }
        
        protection = self.protected_sessions[connection_id]
        stored_password = protection["password"]
        protection_data = protection["protection_data"]
        
        # Verifica se a senha est√° correta
        if password != stored_password:
            # Log de tentativa incorreta
            logging.warning(f"Tentativa de acesso com senha incorreta (local) - Usu√°rio: {requesting_user} | Servidor: {protection_data.get('connection_name')}")
            return {
                "valid": False,
                "reason": "Senha de prote√ß√£o incorreta (local)"
            }
        
        # Senha correta - registra acesso autorizado
        self._log_authorized_access(requesting_user, protection_data)
        
        return {
            "valid": True,
            "protection_data": protection_data
        }

    def remove_session_protection(self, connection_id: int, user: str) -> bool:
        """Remove prote√ß√£o de uma sess√£o no servidor."""
        
        # Tenta remover no servidor primeiro
        if self.session_repo:
            try:
                success, message = self.session_repo.remove_session_protection(
                    con_codigo=connection_id,
                    removing_user=user
                )
                
                if success:
                    logging.info(f"Prote√ß√£o removida do servidor - Conex√£o: {connection_id} por {user}")
                    return True
                else:
                    logging.warning(f"Falha ao remover prote√ß√£o do servidor: {message}")
                    # Tenta fallback local
                    
            except Exception as e:
                logging.error(f"Erro ao remover prote√ß√£o do servidor: {e}")
                # Fallback para modo local
        
        # Remo√ß√£o local (fallback)
        try:
            if connection_id not in self.protected_sessions:
                return False
            
            protection_data = self.protected_sessions[connection_id]["protection_data"]
            
            # Verifica se √© o usu√°rio que criou a prote√ß√£o
            if user != protection_data.get("protected_by"):
                logging.warning(f"Tentativa n√£o autorizada de remover prote√ß√£o local por {user}")
                return False
            
            # Remove a prote√ß√£o
            del self.protected_sessions[connection_id]
            
            logging.info(f"Prote√ß√£o removida localmente da conex√£o {connection_id} por {user}")
            return True
            
        except Exception as e:
            logging.error(f"Erro ao remover prote√ß√£o local: {e}")
            return False

    def get_user_protected_sessions(self, user: str) -> List[Dict[str, Any]]:
        """Retorna sess√µes protegidas por um usu√°rio espec√≠fico."""
        self._cleanup_expired_protections()
        
        user_sessions = []
        for connection_id, protection in self.protected_sessions.items():
            protection_data = protection["protection_data"]
            if protection_data.get("protected_by") == user:
                session_info = protection_data.copy()
                session_info["connection_id"] = connection_id
                # Remove senha por seguran√ßa
                if "password" in session_info:
                    del session_info["password"]
                user_sessions.append(session_info)
        
        return user_sessions

    def _cleanup_expired_protections(self):
        """Remove prote√ß√µes expiradas."""
        current_time = time.time()
        
        # Para testes, permite for√ßar limpeza
        if hasattr(self, '_force_cleanup') and self._force_cleanup:
            pass  # For√ßa execu√ß√£o
        elif current_time - self.last_cleanup < self.cleanup_interval:
            return
        
        now = datetime.now()
        expired_connections = []
        
        for connection_id, protection in self.protected_sessions.items():
            protection_data = protection["protection_data"]
            expiry_time = datetime.fromisoformat(protection_data["expiry_time"])
            if now > expiry_time:
                expired_connections.append(connection_id)
        
        for connection_id in expired_connections:
            protection_data = self.protected_sessions[connection_id]["protection_data"]
            logging.info(f"Prote√ß√£o expirada removida - Servidor: {protection_data.get('connection_name')} | Protegido por: {protection_data.get('protected_by')}")
            del self.protected_sessions[connection_id]
        
        self.last_cleanup = current_time

    def force_cleanup_expired(self):
        """For√ßa limpeza de prote√ß√µes expiradas (para testes)."""
        self._force_cleanup = True
        self._cleanup_expired_protections()
        self._force_cleanup = False

    def _log_authorized_access(self, user: str, protection_data: Dict[str, Any]):
        """Registra acesso autorizado com senha correta."""
        log_message = (
            f"üîì ACESSO AUTORIZADO COM SENHA - "
            f"Usu√°rio: {user} | "
            f"Servidor: {protection_data.get('connection_name')} | "
            f"Protegido por: {protection_data.get('protected_by')} | "
            f"Senha validada com sucesso"
        )
        logging.info(log_message)

    def cleanup_all_protections(self):
        """Remove todas as prote√ß√µes (para shutdown)."""
        count = len(self.protected_sessions)
        self.protected_sessions.clear()
        if count > 0:
            logging.info(f"Limpeza completa: {count} prote√ß√µes de sess√£o removidas")

    def cleanup_orphaned_protections(self):
        """Remove prote√ß√µes √≥rf√£s (usu√°rios desconectados)."""
        if self.session_repo:
            try:
                success, message, count = self.session_repo.cleanup_orphaned_protections()
                if success and count > 0:
                    logging.info(f"Limpeza autom√°tica: {count} prote√ß√µes √≥rf√£s removidas")
                return success, message, count
            except Exception as e:
                logging.error(f"Erro na limpeza de prote√ß√µes √≥rf√£s: {e}")
                return False, f"Erro: {e}", 0
        
        # Fallback local - remove prote√ß√µes de usu√°rios que n√£o existem mais
        orphaned_count = 0
        current_time = datetime.now()
        to_remove = []
        
        for connection_id, protection in self.protected_sessions.items():
            protection_data = protection["protection_data"]
            # Se a prote√ß√£o √© muito antiga (mais de 4 horas), considera √≥rf√£
            created_time = datetime.fromisoformat(protection["created_at"])
            if (current_time - created_time).total_seconds() > 14400:  # 4 horas
                to_remove.append(connection_id)
                orphaned_count += 1
                
        for connection_id in to_remove:
            protection_data = self.protected_sessions[connection_id]["protection_data"]
            logging.info(f"Removendo prote√ß√£o √≥rf√£ local: {protection_data.get('connection_name')}")
            del self.protected_sessions[connection_id]
            
        return True, f"Limpeza local: {orphaned_count} prote√ß√µes √≥rf√£s removidas", orphaned_count


# Inst√¢ncia global do gerenciador (ser√° configurada com DB no main)
session_protection_manager = SessionProtectionManager()

def configure_session_protection_with_db(db_service):
    """Configura o gerenciador com acesso ao banco de dados."""
    global session_protection_manager
    session_protection_manager = SessionProtectionManager(db_service)