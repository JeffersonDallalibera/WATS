#!/usr/bin/env python3
"""
Script para testar o sistema de senha tempor√°ria colaborativa
Valida funcionalidades de gera√ß√£o, valida√ß√£o e expira√ß√£o de senhas
"""

import os
import sys
import time
from datetime import datetime, timedelta

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "."))


def test_password_generation():
    """Testa gera√ß√£o de senhas tempor√°rias"""

    print("=== TESTE DE GERA√á√ÉO DE SENHAS ===")

    try:
        # Simula gera√ß√£o de senha (m√©todo privado, mas podemos testar a l√≥gica)
        import secrets
        import string

        def generate_temp_password():
            alphabet = string.ascii_letters + string.digits
            return "".join(secrets.choice(alphabet) for _ in range(8))

        # Gera algumas senhas de teste
        passwords = [generate_temp_password() for _ in range(5)]

        print("Senhas geradas:")
        for i, password in enumerate(passwords, 1):
            print(f"  {i}. {password} (comprimento: {len(password)})")

        # Verifica caracter√≠sticas
        all_valid = True
        for password in passwords:
            if len(password) != 8:
                print(f"‚ùå ERRO: Senha {password} n√£o tem 8 caracteres")
                all_valid = False

            has_letter = any(c.isalpha() for c in password)
            has_digit = any(c.isdigit() for c in password)

            if not (has_letter and has_digit):
                print(f"‚ö†Ô∏è  Senha {password} n√£o tem mix de letras e n√∫meros")

        if all_valid:
            print("‚úÖ Todas as senhas t√™m formato correto")

        return True

    except Exception as e:
        print(f"‚ùå ERRO: Falha no teste de gera√ß√£o: {e}")
        return False


def test_password_validator():
    """Testa o validador de senhas tempor√°rias"""

    print("\\n=== TESTE DO VALIDADOR DE SENHAS ===")

    try:
        from src.wats.collaborative_access import TemporaryPasswordValidator

        validator = TemporaryPasswordValidator()

        # Dados de teste
        test_password = "TEST1234"
        connection_id = 123
        user = "test.user"

        request_data = {
            "connection_id": connection_id,
            "connection_name": "Servidor de Teste",
            "requesting_user": user,
            "connected_user": "other.user",
            "reason": "Teste de funcionalidade",
            "access_type": "shared",
            "temp_password": test_password,
            "duration_minutes": 15,
            "expiry_time": (datetime.now() + timedelta(minutes=15)).isoformat(),
            "created_at": datetime.now().isoformat(),
        }

        # Registra senha
        validator.register_temp_password(test_password, request_data)
        print(f"‚úÖ Senha {test_password} registrada")

        # Testa valida√ß√£o v√°lida
        result = validator.validate_temp_password(test_password, connection_id, user)
        if result["valid"]:
            print("‚úÖ Valida√ß√£o de senha v√°lida funcionando")
        else:
            print(f"‚ùå ERRO: Senha v√°lida foi rejeitada: {result['reason']}")
            return False

        # Testa senha inexistente
        result = validator.validate_temp_password("INVALID123", connection_id, user)
        if not result["valid"]:
            print("‚úÖ Rejei√ß√£o de senha inv√°lida funcionando")
        else:
            print("‚ùå ERRO: Senha inv√°lida foi aceita")
            return False

        # Testa conex√£o incorreta
        result = validator.validate_temp_password(test_password, 999, user)
        if not result["valid"]:
            print("‚úÖ Valida√ß√£o de conex√£o funcionando")
        else:
            print("‚ùå ERRO: Conex√£o incorreta foi aceita")
            return False

        # Testa usu√°rio incorreto
        result = validator.validate_temp_password(test_password, connection_id, "wrong.user")
        if not result["valid"]:
            print("‚úÖ Valida√ß√£o de usu√°rio funcionando")
        else:
            print("‚ùå ERRO: Usu√°rio incorreto foi aceito")
            return False

        return True

    except Exception as e:
        print(f"‚ùå ERRO: Falha no teste do validador: {e}")
        return False


def test_password_expiration():
    """Testa expira√ß√£o de senhas"""

    print("\\n=== TESTE DE EXPIRA√á√ÉO DE SENHAS ===")

    try:
        from src.wats.collaborative_access import TemporaryPasswordValidator

        validator = TemporaryPasswordValidator()

        # Senha que expira em 1 segundo
        test_password = "EXPIRE12"
        connection_id = 456
        user = "test.user"

        request_data = {
            "connection_id": connection_id,
            "connection_name": "Teste Expira√ß√£o",
            "requesting_user": user,
            "connected_user": "other.user",
            "reason": "Teste de expira√ß√£o",
            "access_type": "shared",
            "temp_password": test_password,
            "duration_minutes": 1,
            "expiry_time": (datetime.now() + timedelta(seconds=1)).isoformat(),
            "created_at": datetime.now().isoformat(),
        }

        # Registra senha
        validator.register_temp_password(test_password, request_data)
        print(f"‚úÖ Senha {test_password} registrada com expira√ß√£o em 1 segundo")

        # Testa antes da expira√ß√£o
        result = validator.validate_temp_password(test_password, connection_id, user)
        if result["valid"]:
            print("‚úÖ Senha v√°lida antes da expira√ß√£o")
        else:
            print(f"‚ùå ERRO: Senha rejeitada antes da expira√ß√£o: {result['reason']}")
            return False

        # Aguarda expira√ß√£o
        print("‚è≥ Aguardando expira√ß√£o...")
        time.sleep(2)

        # Testa ap√≥s expira√ß√£o
        result = validator.validate_temp_password(test_password, connection_id, user)
        if not result["valid"] and "expirada" in result["reason"]:
            print("‚úÖ Senha expirada corretamente rejeitada")
        else:
            print(f"‚ùå ERRO: Senha expirada foi aceita ou erro inesperado: {result}")
            return False

        return True

    except Exception as e:
        print(f"‚ùå ERRO: Falha no teste de expira√ß√£o: {e}")
        return False


def test_cleanup_functionality():
    """Testa funcionalidade de limpeza"""

    print("\\n=== TESTE DE LIMPEZA ===")

    try:
        from src.wats.collaborative_access import TemporaryPasswordValidator

        validator = TemporaryPasswordValidator()

        # Adiciona algumas senhas de teste
        test_passwords = ["CLEAN001", "CLEAN002", "CLEAN003"]

        for i, password in enumerate(test_passwords):
            request_data = {
                "connection_id": 100 + i,
                "connection_name": f"Teste Limpeza {i+1}",
                "requesting_user": "test.user",
                "connected_user": "other.user",
                "reason": f"Teste de limpeza {i+1}",
                "access_type": "shared",
                "temp_password": password,
                "duration_minutes": 15,
                "expiry_time": (datetime.now() + timedelta(minutes=15)).isoformat(),
                "created_at": datetime.now().isoformat(),
            }
            validator.register_temp_password(password, request_data)

        print(f"‚úÖ {len(test_passwords)} senhas registradas")

        # Verifica senhas ativas
        active_count = len(validator.active_passwords)
        if active_count >= len(test_passwords):
            print(f"‚úÖ Senhas ativas detectadas: {active_count}")
        else:
            print(f"‚ö†Ô∏è  Contagem de senhas ativa inesperada: {active_count}")

        # Executa limpeza completa
        validator.cleanup_all_passwords()

        # Verifica se limpeza funcionou
        if len(validator.active_passwords) == 0:
            print("‚úÖ Limpeza completa funcionando")
        else:
            print(f"‚ùå ERRO: Limpeza incompleta, restam {len(validator.active_passwords)} senhas")
            return False

        return True

    except Exception as e:
        print(f"‚ùå ERRO: Falha no teste de limpeza: {e}")
        return False


def test_collaborative_dialog_import():
    """Testa se o di√°logo pode ser importado"""

    print("\\n=== TESTE DE IMPORTA√á√ÉO DO DI√ÅLOGO ===")

    try:
        from src.wats.collaborative_access import temp_password_validator

        print("‚úÖ M√≥dulo collaborative_access importado com sucesso")
        print("‚úÖ temp_password_validator importado com sucesso")

        # Verifica se o validador global est√° funcionando
        validator_type = type(temp_password_validator).__name__
        if validator_type == "TemporaryPasswordValidator":
            print("‚úÖ Validador global configurado corretamente")
        else:
            print(f"‚ùå ERRO: Tipo inesperado do validador: {validator_type}")
            return False

        return True

    except ImportError as e:
        print(f"‚ùå ERRO: Falha na importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERRO: Falha no teste de importa√ß√£o: {e}")
        return False


def show_integration_guide():
    """Mostra guia de integra√ß√£o"""

    print("\\n=== GUIA DE INTEGRA√á√ÉO ===")
    print("üìã Como usar o sistema de acesso colaborativo:")
    print("")
    print("1. SOLICITA√á√ÉO:")
    print("   - Usu√°rio clica em conex√£o ocupada")
    print("   - Escolhe 'Solicitar Acesso Colaborativo'")
    print("   - Preenche motivo e configura√ß√µes")
    print("   - Sistema gera senha tempor√°ria")
    print("")
    print("2. VALIDA√á√ÉO:")
    print("   - Sistema valida senha antes de conectar")
    print("   - Verifica expira√ß√£o, conex√£o e usu√°rio")
    print("   - Registra uso para auditoria")
    print("")
    print("3. TIPOS DE ACESSO:")
    print("   - Compartilhado: Ambos usu√°rios conectados")
    print("   - Exclusivo: Desconecta o outro usu√°rio")
    print("")
    print("4. AUDITORIA:")
    print("   - Todas solicita√ß√µes registradas em logs")
    print("   - Rastreamento de uso de senhas")
    print("   - Controle de expira√ß√£o autom√°tica")
    print("")
    print("üîê Benef√≠cios implementados:")
    print("  ‚úì Senhas tempor√°rias seguras (8 caracteres)")
    print("  ‚úì Expira√ß√£o autom√°tica configur√°vel")
    print("  ‚úì Valida√ß√£o multi-camada")
    print("  ‚úì Auditoria completa")
    print("  ‚úì Interface intuitiva")
    print("  ‚úì Limpeza autom√°tica")


def main():
    """Executa todos os testes"""

    print("üîê TESTANDO SISTEMA DE SENHA TEMPOR√ÅRIA COLABORATIVA\\n")

    tests = [
        ("Gera√ß√£o de Senhas", test_password_generation),
        ("Validador de Senhas", test_password_validator),
        ("Expira√ß√£o de Senhas", test_password_expiration),
        ("Funcionalidade de Limpeza", test_cleanup_functionality),
        ("Importa√ß√£o do Di√°logo", test_collaborative_dialog_import),
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\\n--- {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå ERRO no teste {test_name}: {e}")
            results.append((test_name, False))

    # Resumo dos resultados
    print("\\n" + "=" * 60)
    print("RESUMO DOS TESTES DE ACESSO COLABORATIVO")
    print("=" * 60)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {test_name}")
        if result:
            passed += 1

    print(f"\\nResultado Final: {passed}/{total} testes passaram")

    if passed == total:
        print("üéâ Sistema de acesso colaborativo implementado com sucesso!")
        show_integration_guide()
    elif passed >= total - 1:
        print("‚úÖ Implementa√ß√£o est√° quase perfeita")
        show_integration_guide()
    else:
        print("‚ö†Ô∏è  Algumas funcionalidades precisam de aten√ß√£o")


if __name__ == "__main__":
    main()
